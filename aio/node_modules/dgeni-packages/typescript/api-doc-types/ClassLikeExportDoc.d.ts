import { Declaration, Symbol } from 'typescript';
import { ParsedDecorator } from "../services/TsParser/getDecorators";
import { ContainerExportDoc } from './ContainerExportDoc';
import { ModuleDoc } from './ModuleDoc';
/**
 * Interfaces and classes are "class-like", in that they can contain members, heritage, type parameters and decorators
 */
export declare abstract class ClassLikeExportDoc extends ContainerExportDoc {
    decorators: ParsedDecorator[] | undefined;
    extendsClauses: string[];
    implementsClauses: string[];
    typeParams: string;
    constructor(moduleDoc: ModuleDoc, symbol: Symbol, declaration: Declaration, basePath: string, namespacesToInclude: string[]);
    private computeTypeParams();
    private addAliases();
    private computeHeritage();
}
