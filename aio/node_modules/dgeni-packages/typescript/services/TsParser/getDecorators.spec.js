"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
var getDecorators_1 = require("./getDecorators");
var path = require('canonical-path');
describe('getDecoratorSpec', function () {
    var parser;
    var basePath;
    beforeEach(function () {
        parser = new _1.TsParser(require('dgeni/lib/mocks/log')(false));
        basePath = path.resolve(__dirname, '../../mocks');
    });
    it('should return the decorators of the declarations', function () {
        var parseInfo = parser.parse(['tsParser/getDecorators.test.ts'], basePath);
        var moduleExports = parseInfo.moduleSymbols[0].exportArray;
        var testClass = moduleExports[0];
        var testMethodDeclaration = testClass.members.get('method').getDeclarations()[0];
        var testParameters = testMethodDeclaration.parameters;
        var classDecorators = getDecorators_1.getDecorators(testClass.getDeclarations()[0]);
        var propertyDecorators = getDecorators_1.getDecorators(testClass.members.get('property').getDeclarations()[0]);
        var methodDecorators = getDecorators_1.getDecorators(testMethodDeclaration);
        testDecorator(classDecorators[0], 'classDecorator');
        testDecorator(classDecorators[1], 'classDecoratorFactory', true);
        testDecorator(propertyDecorators[0], 'propertyDecorator');
        testDecorator(propertyDecorators[1], 'propertyDecoratorFactory', true);
        testDecorator(methodDecorators[0], 'methodDecorator');
        testDecorator(methodDecorators[1], 'methodDecoratorFactory', true);
        testDecorator(getDecorators_1.getDecorators(testParameters[0])[0], 'paramDecorator');
        testDecorator(getDecorators_1.getDecorators(testParameters[1])[0], 'paramDecoratorFactory', true);
    });
});
function testDecorator(decorator, name, isDecoratorFactory) {
    expect(decorator.expression).toBeDefined();
    expect(decorator.name).toEqual(name);
    if (isDecoratorFactory) {
        expect(decorator.isCallExpression).toBeTruthy();
        expect(decorator.argumentInfo).toEqual(["'foo'", "'bar'"]);
        expect(decorator.arguments).toEqual(["'foo'", "'bar'"]);
    }
    else {
        expect(decorator.isCallExpression).toBeFalsy();
    }
}
//# sourceMappingURL=getDecorators.spec.js.map