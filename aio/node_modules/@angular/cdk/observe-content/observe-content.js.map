{"version":3,"sources":["../../../../src/cdk/observe-content/observe-content.ts"],"names":[],"mappings":"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","file":"observe-content.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  NgModule,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {RxChain, debounceTime} from '@angular/cdk/rxjs';\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nexport class MdMutationObserverFactory {\n/**\n * @param {?} callback\n * @return {?}\n */\ncreate(callback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMutationObserverFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMutationObserverFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMutationObserverFactory.ctorParameters;\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver | null;\n/**\n * Event emitted for each change in the element's content.\n */\nevent = new EventEmitter<MutationRecord[]>();\n/**\n * Used for debouncing the emitted values to the observeContent event.\n */\nprivate _debouncer = new Subject<MutationRecord[]>();\n/**\n * Debounce interval for emitting the changes.\n */\ndebounce: number;\n/**\n * @param {?} _mutationObserverFactory\n * @param {?} _elementRef\n */\nconstructor(\nprivate _mutationObserverFactory: MdMutationObserverFactory,\nprivate _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this.debounce > 0) {\n      RxChain.from(this._debouncer)\n        .call(debounceTime, this.debounce)\n        .subscribe((mutations: MutationRecord[]) => this.event.emit(mutations));\n    } else {\n      this._debouncer.subscribe(mutations => this.event.emit(mutations));\n    }\n\n    this._observer = this._mutationObserverFactory.create((mutations: MutationRecord[]) => {\n      this._debouncer.next(mutations);\n    });\n\n    if (this._observer) {\n      this._observer.observe(this._elementRef.nativeElement, {\n        characterData: true,\n        childList: true,\n        subtree: true\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._observer) {\n      this._observer.disconnect();\n      this._debouncer.complete();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkObserveContent]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdMutationObserverFactory, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n'debounce': [{ type: Input },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/**\n * Used for debouncing the emitted values to the observeContent event.\n * @type {?}\n */\nObserveContent.prototype._debouncer;\n/**\n * Debounce interval for emitting the changes.\n * @type {?}\n */\nObserveContent.prototype.debounce;\n/** @type {?} */\nObserveContent.prototype._mutationObserverFactory;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n}\n\nexport class ObserveContentModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [ObserveContent],\n  declarations: [ObserveContent],\n  providers: [MdMutationObserverFactory]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserveContentModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContentModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContentModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}