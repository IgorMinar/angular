{"version":3,"sources":["../../../../src/cdk/bidi/directionality.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OADO,EAEL,YAAY,EACZ,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,cAAK,GACN,MAAM,eAAW,CAAK;AACvB,OADO,EAAA,QAAE,EAAQ,MAAA,2BAAA,CAAA;AAKjB;;;;;;;;;GASG;AACH,MAAC,CAAA,IAAA,YAAA,GAAA,IAAA,cAAA,CAAA,YAAA,CAAA,CAAA;AACD;;;GAGG;AACH;IAGA;;OAEG;IACH,wBAAe,SAAa;QAHjB,UAAA,GAAmB,KAAA,CAAM;QACzB,WAAA,GAAS,IAAI,YAAA,EAAkB,CAAG;QAGzC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,8BAA8B;YAC9B,2CAA2C;YAC3C,kFAAkF;YAClF,uFAAuF;YACvF,IAAM,OAAO,GAAG,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;YAC3D,IAAM,OAAO,GAAG,SAAS,CAAC,eAAe,GAAG,SAAS,CAAC,eAAe,CAAC,GAAG,GAAG,IAAI,CAAC;YACjF,IAAI,CAAC,KAAK,GAAG,CAAC,OAAO,IAAI,OAAO,IAAI,KAAK,CAAc,CAAC;QAC1D,CAAC;IACH,CAAC;IAUH,qBAAC;AAAD,CA1BA,AA0BC;;AATM,yBAAA,GAAoC;IAC3C,EAAE,IAAA,EAAM,UAAA,EAAW;CAClB,CAAC;AACF;;GAEG;AADF,6BAAA,GAAA,cAAA,OAAA;IAGD,EAAC,IAPC,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,EAAA;CAQD,EAJA,CAIA,CAAC;AAGF;IACA,gBAPE;IAQF,cAAc,CAAC,UAAU,CAAC;IAC1B;;;OAGG;IACH,cAPc,CAAA,cAAY,CAAI;IAQ9B,gBAPc;IAQd,cAPG,CAAA,SAAA,CAAA,KAAA,CAAA;IAQH,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC;AAChC,CAAC;AAED;;;;;GAKG;AACH,MArBC,0CAAA,oBAAA,EAAA,SAAA;IAsBC,MAAM,CA5BC,oBAAA,IAAwB,IAAI,cAAA,CAAe,SAAC,CAAS,CAAC;AA6B/D,CAAC;AACD;;GAEG;AACH,MAtBC,CAAA,IAAA,uBAAA,GAAA;IAuBC,0FAA0F;IAC1F,OAAO,EAAE,cAAc;IACvB,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,cAAc,CAAC,EAAE,CAAC,IAAI,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;IACpF,UAAU,EAAE,+BAA+B;CAC5C,CAAC","file":"directionality.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  EventEmitter,\n  Injectable,\n  Optional,\n  SkipSelf,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\n\n\nexport type Direction = 'ltr' | 'rtl';\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n * \n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n * \n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('md-dir-doc');\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nexport class Directionality {\n  readonly value: Direction = 'ltr';\n  readonly change = new EventEmitter<void>();\n/**\n * @param {?=} _document\n */\nconstructor(  _document?: any) {\n    if (_document) {\n      // TODO: handle 'auto' value -\n      // We still need to account for dir=\"auto\".\n      // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n      // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      this.value = (bodyDir || htmlDir || 'ltr') as Direction;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DIR_DOCUMENT, ] }, ]},\n];\n}\n\nfunction Directionality_tsickle_Closure_declarations() {\n/** @type {?} */\nDirectionality.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDirectionality.ctorParameters;\n/** @type {?} */\nDirectionality.prototype.value;\n/** @type {?} */\nDirectionality.prototype.change;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDirectionality\n * @param {?} _document\n * @return {?}\n */\nexport function DIRECTIONALITY_PROVIDER_FACTORY(parentDirectionality, _document) {\n  return parentDirectionality || new Directionality(_document);\n}\n/**\n * \\@docs-private\n */\nexport const DIRECTIONALITY_PROVIDER = {\n  // If there is already a Directionality available, use that. Otherwise, provide a new one.\n  provide: Directionality,\n  deps: [[new Optional(), new SkipSelf(), Directionality], [new Optional(), DOCUMENT]],\n  useFactory: DIRECTIONALITY_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}