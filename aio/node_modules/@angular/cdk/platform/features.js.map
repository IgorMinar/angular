{"version":3,"sources":["../../../../src/cdk/platform/features.ts"],"names":[],"mappings":"AACA;;GAEG;AACH,IAKC,mBAAA,CAAA;AAJD;;GAEG;AACH,IAIC,mBAAA,GAAA;IAHC,4FAA4F;IAC5F,uCAAuC;IACvC,kEAAkE;IAClE,8EAA8E;IAC9E,OAAO;IACP,QAAQ;IACR,UAAU;IACV,MAAM;IACN,gBAAgB;IAChB,OAAO;IACP,MAAM;IACN,QAAQ;IACR,OAAO;IACP,OAAO;IACP,QAAQ;IACR,UAAU;IACV,OAAO;IACP,OAAO;IACP,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;CACP,CAAC;AACF;;GAEG;AACH,MAGC;IAFC,oBAAoB;IACpB,EAAE,CAAC,CAAC,mBAGC,CAAmB,CAAC,CAAA;QAFvB,MAAM,CAGC,mBAAA,CAAoB;IAF7B,CAAC;IAED,2FAA2F;IAC3F,2FAA2F;IAC3F,8CAA8C;IAC9C,EAAE,CAAC,CAAC,OAGO,QAAA,KAAa,QAAA,IAAY,CAAA,QAAE,CAAQ,CAAC,CAAA;QAF7C,mBAAmB,GAGG,IAAI,GAAA,CAAI,mBAAC,CAAmB,CAAC;QAFnD,MAAM,CAGC,mBAAA,CAAoB;IAF7B,CAAC;IAED,IAAI,gBAAgB,CAGhB,gBAAA,GAAmB,QAAA,CAAS,aAAC,CAAa,OAAC,CAAO,CAAC;IAFvD,mBAAmB,GAGG,IAAI,GAAA,CAAI,mBAAC,CAAmB,MAAC,CAAM,UAAA,KAAC;QAFxD,gBAAgB,CAGC,YAAC,CAAY,MAAC,EAAO,KAAA,CAAM,CAAC;QAF7C,MAAM,CAGC,gBAAA,CAAiB,IAAC,KAAQ,KAAA,CAAM;IAFzC,CAAC,CAGC,CAAC,CAAC;IADJ,MAAM,CAGC,mBAAA,CAAoB;AAF7B,CAAC","file":"features.js","sourceRoot":"","sourcesContent":["\n/**\n * Cached result Set of input types support by the current browser.\n */\nlet supportedInputTypes: Set<string>;\n/**\n * Types of <input> that *might* be supported.\n */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n/**\n * @return {?} The input types supported by this browser.\n */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let /** @type {?} */ featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n\n  return supportedInputTypes;\n}\n"]}