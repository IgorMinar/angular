{"version":3,"sources":["../../../../src/cdk/a11y/interactivity-checker.ts"],"names":[],"mappings":"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","file":"interactivity-checker.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nexport class InteractivityChecker {\n/**\n * @param {?} _platform\n */\nconstructor(private _platform: Platform) {}\n/**\n * Gets whether an element is disabled.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is disabled.\n */\nisDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n/**\n * Gets whether an element is visible for the purposes of interactivity.\n * \n * This will capture states like `display: none` and `visibility: hidden`, but not things like\n * being clipped by an `overflow: hidden` parent or being outside the viewport.\n * \n * @param {?} element\n * @return {?} Whether the element is visible.\n */\nisVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n/**\n * Gets whether an element can be reached via Tab key.\n * Assumes that the element has already been checked with isFocusable.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is tabbable.\n */\nisTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the the server ðŸ˜Ž\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    let /** @type {?} */ frameElement = /** @type {?} */(( getWindow(element).frameElement as HTMLElement));\n\n    if (frameElement) {\n\n      let /** @type {?} */ frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    let /** @type {?} */ tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n/**\n * Gets whether an element can be focused by the user.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is focusable.\n */\nisFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction InteractivityChecker_tsickle_Closure_declarations() {\n/** @type {?} */\nInteractivityChecker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInteractivityChecker.ctorParameters;\n/** @type {?} */\nInteractivityChecker.prototype._platform;\n}\n\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element: Node) {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an <input type=\"hidden\">.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let /** @type {?} */ tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const /** @type {?} */ tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  let /** @type {?} */ inputType = nodeName === 'input' && ( /** @type {?} */((element as HTMLInputElement))).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node: HTMLElement): Window {\n  return node.ownerDocument.defaultView || window;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}