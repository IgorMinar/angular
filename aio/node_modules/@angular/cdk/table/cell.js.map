{"version":3,"sources":["../../../../src/cdk/table/cell.ts"],"names":[],"mappings":"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","file":"cell.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ContentChild, Directive, ElementRef, Input, Renderer2, TemplateRef} from '@angular/core';\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class CdkCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellDef.ctorParameters;\n/** @type {?} */\nCdkCellDef.prototype.template;\n}\n\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class CdkHeaderCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkHeaderCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCellDef.ctorParameters;\n/** @type {?} */\nCdkHeaderCellDef.prototype.template;\n}\n\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nexport class CdkColumnDef {\n/**\n * Unique name for this column.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} name\n * @return {?}\n */\nset name(name: string) {\n    this._name = name;\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n  }\n  _name: string;\n/**\n * \\@docs-private\n */\ncell: CdkCellDef;\n/**\n * \\@docs-private\n */\nheaderCell: CdkHeaderCellDef;\n/**\n * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n * do not match are replaced by the '-' character.\n */\ncssClassFriendlyName: string;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkColumnDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['cdkColumnDef', ] },],\n'cell': [{ type: ContentChild, args: [CdkCellDef, ] },],\n'headerCell': [{ type: ContentChild, args: [CdkHeaderCellDef, ] },],\n};\n}\n\nfunction CdkColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkColumnDef.ctorParameters;\n/** @type {?} */\nCdkColumnDef.propDecorators;\n/** @type {?} */\nCdkColumnDef.prototype._name;\n/**\n * \\@docs-private\n * @type {?}\n */\nCdkColumnDef.prototype.cell;\n/**\n * \\@docs-private\n * @type {?}\n */\nCdkColumnDef.prototype.headerCell;\n/**\n * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n * do not match are replaced by the '-' character.\n * @type {?}\n */\nCdkColumnDef.prototype.cssClassFriendlyName;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class CdkHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef, elementRef: ElementRef, renderer: Renderer2) {\n    renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-header-cell',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class CdkCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef, elementRef: ElementRef, renderer: Renderer2) {\n    renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-cell',\n  host: {\n    'class': 'cdk-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}