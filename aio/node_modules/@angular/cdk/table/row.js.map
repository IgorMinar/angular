{"version":3,"sources":["../../../../src/cdk/table/row.ts"],"names":[],"mappings":"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","file":"row.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\nimport {CdkCellDef} from './cell';\n/**\n * The row template that can be used by the md-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nexport abstract class BaseRowDef {\n/**\n * The columns to be displayed on this row.\n */\ncolumns: string[];\n/**\n * Differ used to check if any changes were made to the columns.\n */\nprotected _columnsDiffer: IterableDiffer<any>;\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(public template: TemplateRef<any>,\n              protected _differs: IterableDiffers) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property.\n    const /** @type {?} */ columns = changes['columns'].currentValue;\n    if (!this._columnsDiffer && columns) {\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n/**\n * Returns the difference between the current columns and the columns from the last diff, or null\n * if there is no difference.\n * @return {?}\n */\ngetColumnsDiff(): IterableChanges<any> | null {\n    return this._columnsDiffer.diff(this.columns);\n  }\n}\n\nfunction BaseRowDef_tsickle_Closure_declarations() {\n/**\n * The columns to be displayed on this row.\n * @type {?}\n */\nBaseRowDef.prototype.columns;\n/**\n * Differ used to check if any changes were made to the columns.\n * @type {?}\n */\nBaseRowDef.prototype._columnsDiffer;\n/** @type {?} */\nBaseRowDef.prototype.template;\n/** @type {?} */\nBaseRowDef.prototype._differs;\n}\n\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class CdkHeaderRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkHeaderRowDef]',\n  inputs: ['columns: cdkHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class CdkRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkRowDef]',\n  inputs: ['columns: cdkRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRowDef.ctorParameters;\n}\n\n\n/** Context provided to the row cells */\nexport interface CdkCellOutletRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit: T;\n\n  /** Index location of the row that this cell is located within. */\n  index?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nexport class CdkCellOutlet {\n/**\n * The ordered list of cells to render within this outlet's view container\n */\ncells: CdkCellDef[];\n/**\n * The data context to be provided to each cell\n */\ncontext: any;\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nstatic mostRecentCellOutlet: CdkCellOutlet;\n/**\n * @param {?} _viewContainer\n */\nconstructor(public _viewContainer: ViewContainerRef) {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CdkCellOutlet_tsickle_Closure_declarations() {\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n * @type {?}\n */\nCdkCellOutlet.mostRecentCellOutlet;\n/** @type {?} */\nCdkCellOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellOutlet.ctorParameters;\n/**\n * The ordered list of cells to render within this outlet's view container\n * @type {?}\n */\nCdkCellOutlet.prototype.cells;\n/**\n * The data context to be provided to each cell\n * @type {?}\n */\nCdkCellOutlet.prototype.context;\n/** @type {?} */\nCdkCellOutlet.prototype._viewContainer;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}