{"version":3,"sources":["../../../../src/cdk/table/table.ts"],"names":[],"mappings":"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","file":"table.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  Input,\n  isDevMode,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  QueryList,\n  Renderer2,\n  TrackByFunction,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CollectionViewer, DataSource} from './data-source';\nimport {CdkCellOutlet, CdkCellOutletRowContext, CdkHeaderRowDef, CdkRowDef} from './row';\nimport {takeUntil} from 'rxjs/operator/takeUntil';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Subject} from 'rxjs/Subject';\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\nimport {getTableDuplicateColumnNameError, getTableUnknownColumnError} from './table-errors';\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nexport class RowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[rowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowPlaceholder.ctorParameters;\n/** @type {?} */\nRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nexport class HeaderRowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[headerRowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction HeaderRowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nHeaderRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHeaderRowPlaceholder.ctorParameters;\n/** @type {?} */\nHeaderRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * The table template that can be used by the md-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_TABLE_TEMPLATE = `\n  <ng-container headerRowPlaceholder></ng-container>\n  <ng-container rowPlaceholder></ng-container>`;\n/**\n * A data table that connects with a data source to retrieve data of type `T` and renders\n * a header row and data rows. Updates the rows when new data is provided by the data source.\n */\nexport class CdkTable<T> implements CollectionViewer {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n/**\n * Latest data provided by the data source through the connect interface.\n */\nprivate _data: NgIterable<T> = [];\n/**\n * Subscription that listens for the data provided by the data source.\n */\nprivate _renderChangeSubscription: Subscription | null;\n/**\n * Map of all the user's defined columns (header and data cell template) identified by name.\n */\nprivate _columnDefinitionsByName = new Map<string,  CdkColumnDef>();\n/**\n * Differ used to find the changes in the data provided by the data source.\n */\nprivate _dataDiffer: IterableDiffer<T>;\n/**\n * Tracking function that will be used to check the differences in data changes. Used similarly\n * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n * relative to the function to know if a row should be added/removed/moved.\n * Accepts a function that takes two parameters, `index` and `item`.\n * @param {?} fn\n * @return {?}\n */\nset trackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() &&\n        fn != null && typeof fn !== 'function' && /** @type {?} */((\n        <any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget trackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * Provides a stream containing the latest data array to render. Influenced by the table's\n * stream of view window (what rows are currently on screen).\n * @return {?}\n */\nget dataSource(): DataSource<T> { return this._dataSource; }\n/**\n * @param {?} dataSource\n * @return {?}\n */\nset dataSource(dataSource: DataSource<T>) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\nprivate _dataSource: DataSource<T>;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n */\nviewChange =\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  // Placeholders within the table's template where the header and data rows will be inserted.\n   _rowPlaceholder: RowPlaceholder;\n   _headerRowPlaceholder: HeaderRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n */\n_columnDefinitions: QueryList<CdkColumnDef>;\n/**\n * Template used as the header container.\n */\n_headerDefinition: CdkHeaderRowDef;\n/**\n * Set of templates that used as the data row containers.\n */\n_rowDefinitions: QueryList<CdkRowDef>;\n/**\n * @param {?} _differs\n * @param {?} _changeDetectorRef\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} role\n */\nconstructor(private readonly _differs: IterableDiffers,\nprivate readonly _changeDetectorRef: ChangeDetectorRef,\n              elementRef: ElementRef,\n              renderer: Renderer2,\n               role: string) {\n    if (!role) {\n      renderer.setAttribute(elementRef.nativeElement, 'role', 'grid');\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // TODO(andrewseguin): Setup a listener for scrolling, emit the calculated view to viewChange\n    this._dataDiffer = this._differs.find([]).create(this._trackByFn);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._cacheColumnDefinitionsByName();\n    this._columnDefinitions.changes.subscribe(() => this._cacheColumnDefinitionsByName());\n    this._renderHeaderRow();\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._renderUpdatedColumns();\n    if (this.dataSource && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._rowPlaceholder.viewContainer.clear();\n    this._headerRowPlaceholder.viewContainer.clear();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (this.dataSource) {\n      this.dataSource.disconnect(this);\n    }\n  }\n/**\n * Update the map containing the content's column definitions.\n * @return {?}\n */\nprivate _cacheColumnDefinitionsByName() {\n    this._columnDefinitionsByName.clear();\n    this._columnDefinitions.forEach(columnDef => {\n      if (this._columnDefinitionsByName.has(columnDef.name)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefinitionsByName.set(columnDef.name, columnDef);\n    });\n  }\n/**\n * Check if the header or rows have changed what columns they want to display. If there is a diff,\n * then re-render that section.\n * @return {?}\n */\nprivate _renderUpdatedColumns() {\n    // Re-render the rows when the row definition columns change.\n    this._rowDefinitions.forEach(rowDefinition => {\n      if (!!rowDefinition.getColumnsDiff()) {\n        // Reset the data to an empty array so that renderRowChanges will re-render all new rows.\n        this._dataDiffer.diff([]);\n\n        this._rowPlaceholder.viewContainer.clear();\n        this._renderRowChanges();\n      }\n    });\n\n    // Re-render the header row if there is a difference in its columns.\n    if (this._headerDefinition.getColumnsDiff()) {\n      this._headerRowPlaceholder.viewContainer.clear();\n      this._renderHeaderRow();\n    }\n  }\n/**\n * Switch to the provided data source by resetting the data and unsubscribing from the current\n * render change subscription if one exists. If the data source is null, interpret this by\n * clearing the row placeholder. Otherwise start listening for new data.\n * @param {?} dataSource\n * @return {?}\n */\nprivate _switchDataSource(dataSource: DataSource<T>) {\n    this._data = [];\n\n    if (this.dataSource) {\n      this.dataSource.disconnect(this);\n    }\n\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n\n    // Remove the table's rows if there is now no data source\n    if (!dataSource) {\n      this._rowPlaceholder.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n  }\n/**\n * Set up a subscription for the data provided by the data source.\n * @return {?}\n */\nprivate _observeRenderChanges() {\n    this._renderChangeSubscription = takeUntil.call(this.dataSource.connect(this), this._onDestroy)\n      .subscribe(data => {\n        this._data = data;\n        this._renderRowChanges();\n      });\n  }\n/**\n * Create the embedded view for the header template and place it in the header row view container.\n * @return {?}\n */\nprivate _renderHeaderRow() {\n    const /** @type {?} */ cells = this._getHeaderCellTemplatesForRow(this._headerDefinition);\n    if (!cells.length) { return; }\n\n    // TODO(andrewseguin): add some code to enforce that exactly\n    //   one CdkCellOutlet was instantiated as a result\n    //   of `createEmbeddedView`.\n    this._headerRowPlaceholder.viewContainer\n        .createEmbeddedView(this._headerDefinition.template, {cells});\n\n    cells.forEach(cell => {\n      CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cell.template, {});\n    });\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Check for changes made in the data and render each change (row added/removed/moved).\n * @return {?}\n */\nprivate _renderRowChanges() {\n    const /** @type {?} */ changes = this._dataDiffer.diff(this._data);\n    if (!changes) { return; }\n\n    const /** @type {?} */ viewContainer = this._rowPlaceholder.viewContainer;\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            this._insertRow(this._data[currentIndex], currentIndex);\n          } else if (currentIndex == null) {\n            viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = viewContainer.get(adjustedPreviousIndex);\n            viewContainer.move( /** @type {?} */((view)), currentIndex);\n          }\n        });\n\n    this._updateRowContext();\n  }\n/**\n * Create the embedded view for the data row template and place it in the correct index location\n * within the data row view container.\n * @param {?} rowData\n * @param {?} index\n * @return {?}\n */\nprivate _insertRow(rowData: T, index: number) {\n    // TODO(andrewseguin): Add when predicates to the row definitions\n    //   to find the right template to used based on\n    //   the data rather than choosing the first row definition.\n    const /** @type {?} */ row = this._rowDefinitions.first;\n\n    // Row context that will be provided to both the created embedded row view and its cells.\n    const /** @type {?} */ context: CdkCellOutletRowContext<T> = {$implicit: rowData};\n\n    // TODO(andrewseguin): add some code to enforce that exactly one\n    //   CdkCellOutlet was instantiated as a result  of `createEmbeddedView`.\n    this._rowPlaceholder.viewContainer.createEmbeddedView(row.template, context, index);\n\n    // Insert empty cells if there is no data to improve rendering time.\n    const /** @type {?} */ cells = rowData ? this._getCellTemplatesForRow(row) : [];\n\n    cells.forEach(cell => {\n      CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cell.template, context);\n    });\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Updates the context for each row to reflect any data changes that may have caused\n * rows to be added, removed, or moved. The view container contains the same context\n * that was provided to each of its cells.\n * @return {?}\n */\nprivate _updateRowContext() {\n    const /** @type {?} */ viewContainer = this._rowPlaceholder.viewContainer;\n    for (let /** @type {?} */ index = 0, /** @type {?} */ count = viewContainer.length; index < count; index++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( viewContainer.get(index) as EmbeddedViewRef<CdkCellOutletRowContext<T>>));\n      viewRef.context.index = index;\n      viewRef.context.count = count;\n      viewRef.context.first = index === 0;\n      viewRef.context.last = index === count - 1;\n      viewRef.context.even = index % 2 === 0;\n      viewRef.context.odd = !viewRef.context.even;\n    }\n  }\n/**\n * Returns the cell template definitions to insert into the header\n * as defined by its list of columns to display.\n * @param {?} headerDef\n * @return {?}\n */\nprivate _getHeaderCellTemplatesForRow(headerDef: CdkHeaderRowDef): CdkHeaderCellDef[] {\n    if (!headerDef.columns) { return []; }\n    return headerDef.columns.map(columnId => {\n      const /** @type {?} */ column = this._columnDefinitionsByName.get(columnId);\n\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return column.headerCell;\n    });\n  }\n/**\n * Returns the cell template definitions to insert in the provided row\n * as defined by its list of columns to display.\n * @param {?} rowDef\n * @return {?}\n */\nprivate _getCellTemplatesForRow(rowDef: CdkRowDef): CdkCellDef[] {\n    if (!rowDef.columns) { return []; }\n    return rowDef.columns.map(columnId => {\n      const /** @type {?} */ column = this._columnDefinitionsByName.get(columnId);\n\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return column.cell;\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-table',\n  template: CDK_TABLE_TEMPLATE,\n  host: {\n    'class': 'cdk-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: Renderer2, },\n{type: undefined, decorators: [{ type: Attribute, args: ['role', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trackBy': [{ type: Input },],\n'dataSource': [{ type: Input },],\n'_rowPlaceholder': [{ type: ViewChild, args: [RowPlaceholder, ] },],\n'_headerRowPlaceholder': [{ type: ViewChild, args: [HeaderRowPlaceholder, ] },],\n'_columnDefinitions': [{ type: ContentChildren, args: [CdkColumnDef, ] },],\n'_headerDefinition': [{ type: ContentChild, args: [CdkHeaderRowDef, ] },],\n'_rowDefinitions': [{ type: ContentChildren, args: [CdkRowDef, ] },],\n};\n}\n\nfunction CdkTable_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTable.ctorParameters;\n/** @type {?} */\nCdkTable.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nCdkTable.prototype._onDestroy;\n/**\n * Latest data provided by the data source through the connect interface.\n * @type {?}\n */\nCdkTable.prototype._data;\n/**\n * Subscription that listens for the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._renderChangeSubscription;\n/**\n * Map of all the user's defined columns (header and data cell template) identified by name.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitionsByName;\n/**\n * Differ used to find the changes in the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._dataDiffer;\n/** @type {?} */\nCdkTable.prototype._trackByFn;\n/** @type {?} */\nCdkTable.prototype._dataSource;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n * @type {?}\n */\nCdkTable.prototype.viewChange;\n/** @type {?} */\nCdkTable.prototype._rowPlaceholder;\n/** @type {?} */\nCdkTable.prototype._headerRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitions;\n/**\n * Template used as the header container.\n * @type {?}\n */\nCdkTable.prototype._headerDefinition;\n/**\n * Set of templates that used as the data row containers.\n * @type {?}\n */\nCdkTable.prototype._rowDefinitions;\n/** @type {?} */\nCdkTable.prototype._differs;\n/** @type {?} */\nCdkTable.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}