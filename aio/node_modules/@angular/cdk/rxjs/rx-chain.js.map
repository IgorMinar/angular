{"version":3,"sources":["../../../../src/cdk/rxjs/rx-chain.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH;;;;;;GAMG;AACH;IACA;;OAEG;IACH,iBAH8B,QAAuB;QAAvB,aAAA,GAAA,QAAA,CAAuB;IAAC,CAAA;IAItD;;;;;OAKG;IAHA,YAAA,GAIH,UAJG,OAAA;QAKC,MAAM,CAJC,IAAI,OAAA,CAAQ,OAAC,CAAO,CAAC;IAK9B,CAAC;IACH;;;;;OAKG;IACH,sBAJG,GAIH,UAJG,QAAA;QAAA,cAAA;aAAA,UAAA,EAAA,qBAAA,EAAA,IAAA;YAAA,6BAAA;;QAKC,IAAI,CAJC,QAAC,GAAU,QAAA,CAAS,IAAC,OAAV,QAAA,GAAc,IAAC,CAAI,QAAC,SAAS,IAAI,EAAI,CAAC;QAKtD,MAAM,CAJC,IAAA,CAAK;IAKd,CAAC;IACH;;;;OAIG;IACH,2BAJG,GAIH,UAJG,EAAA;QAKC,MAAM,CAJC,IAAA,CAAK,QAAC,CAAQ,SAAC,CAAS,EAAC,CAAE,CAAC;IAKrC,CAAC;IACH;;;OAGG;IACH,wBAJG,GAIH;QACI,MAAM,CAJC,IAAA,CAAK,QAAC,CAAQ;IAKvB,CAAC;IACH,cAAC;AAAD,CAvCA,AAuCC,IAAA;;AAED;IACA,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC3B,CAAC","file":"rx-chain.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {StrictRxChain} from './rx-operators';\n/**\n * Utility class used to chain RxJS operators.\n * \n * This class is the concrete implementation, but the type used by the user when chaining\n * is StrictRxChain. The strict chain enforces types on the operators to the same level as\n * the prototype-added equivalents.\n */\nexport class RxChain<T> {\n/**\n * @param {?} _context\n */\nprivate constructor(private _context: Observable<T>) { }\n/**\n * Starts a new chain and specifies the initial `this` value.\n * @template O\n * @param {?} context Initial `this` value for the chain.\n * @return {?}\n */\nstatic from<O>(context: Observable<O>): StrictRxChain<O> {\n    return new RxChain(context);\n  }\n/**\n * Invokes an RxJS operator as a part of the chain.\n * @param {?} operator Operator to be invoked.\n * @param {...?} args Arguments to be passed to the operator.\n * @return {?}\n */\ncall(operator: Function, ...args: any[]): RxChain<any> {\n    this._context = operator.call(this._context, ...args);\n    return this;\n  }\n/**\n * Subscribes to the result of the chain.\n * @param {?} fn Callback to be invoked when the result emits a value.\n * @return {?}\n */\nsubscribe(fn: (t: T) => void): Subscription {\n    return this._context.subscribe(fn);\n  }\n/**\n * Returns the result of the chain.\n * @return {?}\n */\nresult(): Observable<T> {\n    return this._context;\n  }\n}\n\nfunction RxChain_tsickle_Closure_declarations() {\n/** @type {?} */\nRxChain.prototype._context;\n}\n\n"]}