{"version":3,"sources":["../../../../src/cdk/portal/portal.ts"],"names":[],"mappings":"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","file":"portal.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    Injector\n} from '@angular/core';\nimport {\n    throwNullPortalHostError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalHostAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\n\n\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost | null;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\n    if (host == null) {\n      throwNullPortalHostError();\n    }\n\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return /** @type {?} */(( <T> host.attach(this)));\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\n    let /** @type {?} */ host = this._attachedHost;\n\n    if (host == null) {\n      throwNoPortalAttachedError();\n    } else {\n      this._attachedHost = null;\n      host.detach();\n    }\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\n * the PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost | null) {\n    this._attachedHost = host;\n  }\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n/**\n * The type of the component that will be instantiated for attachment.\n */\ncomponent: ComponentType<T>;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n */\nviewContainerRef?: ViewContainerRef | null;\n/**\n * [Optional] Injector used for the instantiation of the component.\n */\ninjector?: Injector | null;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\n      component: ComponentType<T>,\n      viewContainerRef?: ViewContainerRef | null,\n      injector?: Injector | null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n  }\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal extends Portal<Map<string, any>> {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n */\ntemplateRef: TemplateRef<any>;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n */\nlocals: Map<string, any> = new Map<string, any>();\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n/**\n * @param {?} host\n * @param {?=} locals\n * @return {?}\n */\nattach(host: PortalHost, locals?: Map<string, any>): Map<string, any> {\n    this.locals = locals == null ? new Map<string, any>() : locals;\n    return super.attach(host);\n  }\n/**\n * @return {?}\n */\ndetach(): void {\n    this.locals = new Map<string, any>();\n    return super.detach();\n  }\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n * @type {?}\n */\nTemplatePortal.prototype.locals;\n}\n\n\n\n/**\n * A `PortalHost` is an space that can contain a single `Portal`.\n */\nexport interface PortalHost {\n  attach(portal: Portal<any>): any;\n\n  detach(): any;\n\n  dispose(): void;\n\n  hasAttached(): boolean;\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\n/**\n * The portal currently attached to the host.\n */\nprivate _attachedPortal: Portal<any> | null;\n/**\n * A function that will permanently dispose this host.\n */\nprivate _disposeFn: (() => void) | null;\n/**\n * Whether this host has already been permanently disposed.\n */\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\n    if (!portal) {\n      throwNullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throwPortalHostAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throwUnknownPortalTypeError();\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal) {}\n/**\n * @return {?}\n */\ndetach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n/**\n * @return {?}\n */\ndispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\n"]}