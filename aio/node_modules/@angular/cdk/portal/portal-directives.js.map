{"version":3,"sources":["../../../../src/cdk/portal/portal-directives.ts"],"names":[],"mappings":"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","file":"portal-directives.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    NgModule,\n    ComponentRef,\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    OnDestroy,\n    Input,\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n * \n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-portal], [cdkPortal], [portal]',\n  exportAs: 'cdkPortal',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n * \n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\n/**\n * The attached portal.\n */\nprivate _portal: Portal<any> | null = null;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> | null {\n    return this._portal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any> | null) {\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._portal = portal;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.dispose();\n    this._portal = null;\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n * \n * @template T\n * @param {?} portal Portal to be attached to the portal host.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    let /** @type {?} */ componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.parentInjector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._portal = portal;\n\n    return ref;\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    portal.setAttachedHost(this);\n\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._portal = portal;\n\n    // TODO(jelbourn): return locals from view\n    return new Map<string, any>();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkPortalHost], [portalHost]',\n  inputs: ['portal: cdkPortalHost']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [TemplatePortalDirective, PortalHostDirective],\n  declarations: [TemplatePortalDirective, PortalHostDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}