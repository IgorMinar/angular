{"version":3,"sources":["../../../../src/cdk/portal/dom-portal-host.ts"],"names":[],"mappings":"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","file":"dom-portal-host.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n * \n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\n    super();\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n * @template T\n * @param {?} portal Portal to be attached\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n    // To move the view to the specified host element. We just re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return new Map<string, any>();\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\n    super.dispose();\n    if (this._hostDomElement.parentNode != null) {\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n    }\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\n"]}