{"version":3,"sources":["../../../../src/lib/autocomplete/autocomplete-trigger.ts"],"names":[],"mappings":"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","file":"autocomplete-trigger.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Input,\n  NgZone,\n  Optional,\n  OnDestroy,\n  ViewContainerRef,\n  Inject,\n  ChangeDetectorRef,\n  InjectionToken,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  TemplatePortal,\n  RepositionScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW, ESCAPE} from '../core/keyboard/keycodes';\nimport {Directionality} from '../core/bidi/index';\nimport {MdInputContainer} from '../input/input-container';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {RxChain, switchMap, first, filter, map} from '../core/rxjs/index';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n               'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n */\nprivate _panelPositionSubscription: Subscription;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n * @param {?} _inputContainer\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality,\nprivate _inputContainer: MdInputContainer,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this.autocomplete) {\n      throw getMdAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    this._resetPlaceholder();\n\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the placeholder is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n\n    return null;\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return RxChain.from(merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n      const /** @type {?} */ inputContainer = this._inputContainer ?\n          this._inputContainer._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n             clickTarget !== this._element.nativeElement &&\n             (!inputContainer || !inputContainer.contains(clickTarget)) &&\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }).result();\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this.closePanel();\n      event.stopPropagation();\n    } else if (this.activeOption && event.keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      this.autocomplete._keyManager.onKeydown(event);\n\n      if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n * the panel height + the option height, so the active option will be just visible at the\n * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n * will become the offset. If that offset is visible within the panel already, the scrollTop is\n * not adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset = this.autocomplete._keyManager.activeItemIndex ?\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT : 0;\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const /** @type {?} */ newScrollTop =\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n      this.autocomplete._setScrollTop(newScrollTop);\n    }\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\n    const /** @type {?} */ firstStable = first.call(this._zone.onStable);\n    const /** @type {?} */ optionChanges = map.call(this.autocomplete.options.changes, () =>\n      this._positionStrategy.recalculateLastPosition());\n\n    // When the zone is stable initially, and when the option list changes...\n    return RxChain.from(merge(firstStable, optionChanges))\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      .call(switchMap, () => {\n        this._resetActiveItem();\n        this.autocomplete._setVisibility();\n        return this.panelClosingActions;\n      })\n      // when the first closing event occurs...\n      .call(first)\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used in a Material container, we should set it through\n    // the property so it can go through the change detection.\n    if (this._inputContainer) {\n      this._inputContainer._mdInputChild.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._scrollStrategy();\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n/**\n * This method subscribes to position changes in the autocomplete panel, so the panel's\n * y-offset can be adjusted to match the new position.\n * @param {?} strategy\n * @return {?}\n */\nprivate _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete],' +\n            'textarea[mdAutocomplete], textarea[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': 'openPanel()',\n    '(input)': '_handleInput($event)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_AUTOCOMPLETE_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._panelPositionSubscription;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}