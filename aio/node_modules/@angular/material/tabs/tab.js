/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { TemplatePortal } from '../core/portal/portal';
import { ViewContainerRef, Input, TemplateRef, ViewChild, ContentChild, Component, ChangeDetectionStrategy, } from '@angular/core';
import { mixinDisabled } from '../core/common-behaviors/disabled';
import { MdTabLabel } from './tab-label';
import { Subject } from 'rxjs/Subject';
/**
 * \@docs-private
 */
var MdTabBase = (function () {
    function MdTabBase() {
    }
    return MdTabBase;
}());
export { MdTabBase };
export var /** @type {?} */ _MdTabMixinBase = mixinDisabled(MdTabBase);
var MdTab = (function (_super) {
    tslib_1.__extends(MdTab, _super);
    /**
     * @param {?} _viewContainerRef
     */
    function MdTab(_viewContainerRef) {
        var _this = _super.call(this) || this;
        _this._viewContainerRef = _viewContainerRef;
        /**
         * The plain text label for the tab, used when there is no template label.
         */
        _this.textLabel = '';
        /**
         * The portal that will be the hosted content of the tab
         */
        _this._contentPortal = null;
        /**
         * Emits whenever the label changes.
         */
        _this._labelChange = new Subject();
        /**
         * The relatively indexed position where 0 represents the center, negative is left, and positive
         * represents the right.
         */
        _this.position = null;
        /**
         * The initial relatively index origin of the tab if it was created and selected after there
         * was already a selected tab. Provides context of what position the tab should originate from.
         */
        _this.origin = null;
        return _this;
    }
    Object.defineProperty(MdTab.prototype, "content", {
        /**
         * @return {?}
         */
        get: function () { return this._contentPortal; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    MdTab.prototype.ngOnChanges = function (changes) {
        if (changes.hasOwnProperty('textLabel')) {
            this._labelChange.next();
        }
    };
    /**
     * @return {?}
     */
    MdTab.prototype.ngOnDestroy = function () {
        this._labelChange.complete();
    };
    /**
     * @return {?}
     */
    MdTab.prototype.ngOnInit = function () {
        this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);
    };
    return MdTab;
}(_MdTabMixinBase));
export { MdTab };
MdTab.decorators = [
    { type: Component, args: [{selector: 'md-tab, mat-tab',
                template: "<ng-template><ng-content></ng-content></ng-template>",
                inputs: ['disabled'],
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
MdTab.ctorParameters = function () { return [
    { type: ViewContainerRef, },
]; };
MdTab.propDecorators = {
    'templateLabel': [{ type: ContentChild, args: [MdTabLabel,] },],
    '_content': [{ type: ViewChild, args: [TemplateRef,] },],
    'textLabel': [{ type: Input, args: ['label',] },],
};
function MdTab_tsickle_Closure_declarations() {
    /** @type {?} */
    MdTab.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdTab.ctorParameters;
    /** @type {?} */
    MdTab.propDecorators;
    /**
     * Content for the tab label given by <ng-template md-tab-label>.
     * @type {?}
     */
    MdTab.prototype.templateLabel;
    /**
     * Template inside the MdTab view that contains an <ng-content>.
     * @type {?}
     */
    MdTab.prototype._content;
    /**
     * The plain text label for the tab, used when there is no template label.
     * @type {?}
     */
    MdTab.prototype.textLabel;
    /**
     * The portal that will be the hosted content of the tab
     * @type {?}
     */
    MdTab.prototype._contentPortal;
    /**
     * Emits whenever the label changes.
     * @type {?}
     */
    MdTab.prototype._labelChange;
    /**
     * The relatively indexed position where 0 represents the center, negative is left, and positive
     * represents the right.
     * @type {?}
     */
    MdTab.prototype.position;
    /**
     * The initial relatively index origin of the tab if it was created and selected after there
     * was already a selected tab. Provides context of what position the tab should originate from.
     * @type {?}
     */
    MdTab.prototype.origin;
    /** @type {?} */
    MdTab.prototype._viewContainerRef;
}
//# sourceMappingURL=tab.js.map