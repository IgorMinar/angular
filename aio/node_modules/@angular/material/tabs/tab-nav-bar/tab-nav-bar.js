/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { Component, Directive, ElementRef, HostBinding, Inject, Input, NgZone, Optional, Renderer2, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, } from '@angular/core';
import { MdInkBar } from '../ink-bar';
import { mixinDisabled } from '../../core/common-behaviors/disabled';
import { MdRipple } from '../../core';
import { ViewportRuler } from '../../core/overlay/position/viewport-ruler';
import { Directionality, MD_RIPPLE_GLOBAL_OPTIONS, Platform } from '../../core';
import { mixinColor } from '../../core/common-behaviors/color';
import { Subject } from 'rxjs/Subject';
import { takeUntil, auditTime } from '../../core/rxjs/index';
import { of as observableOf } from 'rxjs/observable/of';
import { merge } from 'rxjs/observable/merge';
import { fromEvent } from 'rxjs/observable/fromEvent';
/**
 * \@docs-private
 */
var MdTabNavBase = (function () {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     */
    function MdTabNavBase(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
    }
    return MdTabNavBase;
}());
export { MdTabNavBase };
function MdTabNavBase_tsickle_Closure_declarations() {
    /** @type {?} */
    MdTabNavBase.prototype._renderer;
    /** @type {?} */
    MdTabNavBase.prototype._elementRef;
}
export var /** @type {?} */ _MdTabNavMixinBase = mixinColor(MdTabNavBase, 'primary');
/**
 * Navigation component matching the styles of the tab group header.
 * Provides anchored navigation with animated ink bar.
 */
var MdTabNav = (function (_super) {
    tslib_1.__extends(MdTabNav, _super);
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} _dir
     * @param {?} _ngZone
     * @param {?} _changeDetectorRef
     */
    function MdTabNav(renderer, elementRef, _dir, _ngZone, _changeDetectorRef) {
        var _this = _super.call(this, renderer, elementRef) || this;
        _this._dir = _dir;
        _this._ngZone = _ngZone;
        _this._changeDetectorRef = _changeDetectorRef;
        /**
         * Subject that emits when the component has been destroyed.
         */
        _this._onDestroy = new Subject();
        return _this;
    }
    Object.defineProperty(MdTabNav.prototype, "backgroundColor", {
        /**
         * Background color of the tab nav.
         * @return {?}
         */
        get: function () { return this._backgroundColor; },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            var /** @type {?} */ nativeElement = this._elementRef.nativeElement;
            this._renderer.removeClass(nativeElement, "mat-background-" + this.backgroundColor);
            if (value) {
                this._renderer.addClass(nativeElement, "mat-background-" + value);
            }
            this._backgroundColor = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Notifies the component that the active link has been changed.
     * @param {?} element
     * @return {?}
     */
    MdTabNav.prototype.updateActiveLink = function (element) {
        this._activeLinkChanged = this._activeLinkElement != element;
        this._activeLinkElement = element;
        if (this._activeLinkChanged) {
            this._changeDetectorRef.markForCheck();
        }
    };
    /**
     * @return {?}
     */
    MdTabNav.prototype.ngAfterContentInit = function () {
        var _this = this;
        this._resizeSubscription = this._ngZone.runOutsideAngular(function () {
            var /** @type {?} */ dirChange = _this._dir ? _this._dir.change : observableOf(null);
            var /** @type {?} */ resize = typeof window !== 'undefined' ?
                auditTime.call(fromEvent(window, 'resize'), 10) :
                observableOf(null);
            return takeUntil.call(merge(dirChange, resize), _this._onDestroy)
                .subscribe(function () { return _this._alignInkBar(); });
        });
    };
    /**
     * Checks if the active link has been changed and, if so, will update the ink bar.
     * @return {?}
     */
    MdTabNav.prototype.ngAfterContentChecked = function () {
        if (this._activeLinkChanged) {
            this._alignInkBar();
            this._activeLinkChanged = false;
        }
    };
    /**
     * @return {?}
     */
    MdTabNav.prototype.ngOnDestroy = function () {
        this._onDestroy.next();
        if (this._resizeSubscription) {
            this._resizeSubscription.unsubscribe();
        }
    };
    /**
     * Aligns the ink bar to the active link.
     * @return {?}
     */
    MdTabNav.prototype._alignInkBar = function () {
        if (this._activeLinkElement) {
            this._inkBar.alignToElement(this._activeLinkElement.nativeElement);
        }
    };
    return MdTabNav;
}(_MdTabNavMixinBase));
export { MdTabNav };
MdTabNav.decorators = [
    { type: Component, args: [{selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',
                inputs: ['color'],
                template: "<div class=\"mat-tab-links\" (cdkObserveContent)=\"_alignInkBar()\"><ng-content></ng-content><md-ink-bar></md-ink-bar></div>",
                styles: [".mat-tab-nav-bar{overflow:hidden;position:relative;flex-shrink:0}.mat-tab-links{position:relative}.mat-tab-link{height:48px;padding:0 12px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden}.mat-tab-link:focus{outline:0;opacity:1}.mat-tab-link.mat-tab-disabled{cursor:default;pointer-events:none}@media (max-width:600px){.mat-tab-link{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}"],
                host: { 'class': 'mat-tab-nav-bar' },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
MdTabNav.ctorParameters = function () { return [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: Directionality, decorators: [{ type: Optional },] },
    { type: NgZone, },
    { type: ChangeDetectorRef, },
]; };
MdTabNav.propDecorators = {
    '_inkBar': [{ type: ViewChild, args: [MdInkBar,] },],
    'backgroundColor': [{ type: Input },],
};
function MdTabNav_tsickle_Closure_declarations() {
    /** @type {?} */
    MdTabNav.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdTabNav.ctorParameters;
    /** @type {?} */
    MdTabNav.propDecorators;
    /**
     * Subject that emits when the component has been destroyed.
     * @type {?}
     */
    MdTabNav.prototype._onDestroy;
    /** @type {?} */
    MdTabNav.prototype._activeLinkChanged;
    /** @type {?} */
    MdTabNav.prototype._activeLinkElement;
    /** @type {?} */
    MdTabNav.prototype._inkBar;
    /**
     * Subscription for window.resize event *
     * @type {?}
     */
    MdTabNav.prototype._resizeSubscription;
    /** @type {?} */
    MdTabNav.prototype._backgroundColor;
    /** @type {?} */
    MdTabNav.prototype._dir;
    /** @type {?} */
    MdTabNav.prototype._ngZone;
    /** @type {?} */
    MdTabNav.prototype._changeDetectorRef;
}
var MdTabLinkBase = (function () {
    function MdTabLinkBase() {
    }
    return MdTabLinkBase;
}());
export { MdTabLinkBase };
export var /** @type {?} */ _MdTabLinkMixinBase = mixinDisabled(MdTabLinkBase);
/**
 * Link inside of a `md-tab-nav-bar`.
 */
var MdTabLink = (function (_super) {
    tslib_1.__extends(MdTabLink, _super);
    /**
     * @param {?} _mdTabNavBar
     * @param {?} _elementRef
     * @param {?} ngZone
     * @param {?} ruler
     * @param {?} platform
     * @param {?} globalOptions
     */
    function MdTabLink(_mdTabNavBar, _elementRef, ngZone, ruler, platform, globalOptions) {
        var _this = _super.call(this) || this;
        _this._mdTabNavBar = _mdTabNavBar;
        _this._elementRef = _elementRef;
        /**
         * Whether the tab link is active or not.
         */
        _this._isActive = false;
        // Manually create a ripple instance that uses the tab link element as trigger element.
        // Notice that the lifecycle hooks for the ripple config won't be called anymore.
        _this._tabLinkRipple = new MdRipple(_elementRef, ngZone, ruler, platform, globalOptions);
        return _this;
    }
    Object.defineProperty(MdTabLink.prototype, "active", {
        /**
         * Whether the link is active.
         * @return {?}
         */
        get: function () { return this._isActive; },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._isActive = value;
            if (value) {
                this._mdTabNavBar.updateActiveLink(this._elementRef);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdTabLink.prototype, "tabIndex", {
        /**
         * \@docs-private
         * @return {?}
         */
        get: function () {
            return this.disabled ? -1 : 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdTabLink.prototype.ngOnDestroy = function () {
        // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be
        // called automatically since its instance is not created by Angular.
        this._tabLinkRipple.ngOnDestroy();
    };
    return MdTabLink;
}(_MdTabLinkMixinBase));
export { MdTabLink };
MdTabLink.decorators = [
    { type: Directive, args: [{
                selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',
                inputs: ['disabled'],
                host: {
                    'class': 'mat-tab-link',
                    '[attr.aria-disabled]': 'disabled.toString()',
                    '[class.mat-tab-disabled]': 'disabled'
                }
            },] },
];
/**
 * @nocollapse
 */
MdTabLink.ctorParameters = function () { return [
    { type: MdTabNav, },
    { type: ElementRef, },
    { type: NgZone, },
    { type: ViewportRuler, },
    { type: Platform, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS,] },] },
]; };
MdTabLink.propDecorators = {
    'active': [{ type: Input },],
    'tabIndex': [{ type: HostBinding, args: ['tabIndex',] },],
};
function MdTabLink_tsickle_Closure_declarations() {
    /** @type {?} */
    MdTabLink.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdTabLink.ctorParameters;
    /** @type {?} */
    MdTabLink.propDecorators;
    /**
     * Whether the tab link is active or not.
     * @type {?}
     */
    MdTabLink.prototype._isActive;
    /**
     * Reference to the instance of the ripple for the tab link.
     * @type {?}
     */
    MdTabLink.prototype._tabLinkRipple;
    /** @type {?} */
    MdTabLink.prototype._mdTabNavBar;
    /** @type {?} */
    MdTabLink.prototype._elementRef;
}
//# sourceMappingURL=tab-nav-bar.js.map