{"version":3,"sources":["../../../../src/lib/tabs/tab-label-wrapper.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAGH,OADO,EAAA,SAAE,EAAU,UAAA,EAAW,MAAA,eAAA,CAAA;AAE9B,OADO,EAAa,aAAA,EAAc,MAAA,mCAAA,CAAA;AAElC;;GAEG;AACH;IAAA;IADC,CAAoC;IAApC,4BAAoC;AAApC,CACD,AADqC,IAAA;;AAErC,MAAM,CADC,IAAA,gBAAA,CAAM,2BAAA,GAA8B,aAAA,CAAc,qBAAC,CAAqB,CAAC;AAEhF;;;GAGG;AACH;IACC,6CAAA;IAAD;;OAEG;IACH,2BAFqB,UAAY;QAEjC,YACI,iBAAO,SACR;QAJkB,gBAAA,GAAA,UAAA,CAAY;;IAI/B,CAAC;IACH;;;OAGG;IACH,iCAJG,GAIH;QACI,IAAI,CAJC,UAAC,CAAU,aAAC,CAAa,KAAC,EAAK,CAAE;IAKxC,CAAC;IACH;;OAEG;IACH,yCANG,GAMH;QACI,MAAM,CANC,IAAA,CAAK,UAAC,CAAU,aAAC,CAAa,UAAC,CAAU;IAOlD,CAAC;IACH;;OAEG;IACH,0CARG,GAQH;QACI,MAAM,CARC,IAAA,CAAK,UAAC,CAAU,aAAC,CAAa,WAAC,CAAW;IASnD,CAAC;IAgBH,wBAAC;AAAD,CAzCA,AAyCC,CAxCA,2BAAA;;AAiBM,4BAAA,GAAoC;IAS3C,EARE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBASvB,QAAQ,EARE,2CAAA;gBASV,MAAM,EARE,CAAA,UAAE,CAAU;gBASpB,IAAI,EARE;oBAEN,0BAAA,EAD8B,UAAA;iBAS7B;aACF,EARC,EAAG;CASJ,CARC;AASF;;GAEG;AATF,gCAAA,GAAA,cAAA,OAAA;IAWD,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,EAZA,CAYA,CAAC;AAGF;IACA,gBAAgB;IAChB,iBAAiB,CAAC,UAAU,CAAC;IAC7B;;;OAGG;IACH,iBAAiB,CAAC,cAAc,CAAC;IACjC,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC;AACvC,CAAC","file":"tab-label-wrapper.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdTabLabelWrapperBase {}\nexport const /** @type {?} */ _MdTabLabelWrapperMixinBase = mixinDisabled(MdTabLabelWrapperBase);\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper extends _MdTabLabelWrapperMixinBase implements CanDisable {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    super();\n  }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdTabLabelWrapper], [matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}