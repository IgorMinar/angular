{"version":3,"sources":["../../../../src/lib/toolbar/toolbar.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAGH,OADO,EAEL,SAAS,EACT,uBAAmB,EACnB,iBAAW,EACX,SAAS,EACT,UAAU,EACV,SAAK,GACN,MAAM,eAAW,CAAA;AAClB,OADO,EAAW,UAAA,EAAW,MAAA,gCAAA,CAAA;AAE7B;IAAA;IAWA,CAAC;IAAD,mBAAC;AAAD,CAXA,AAWC;;AATiC,uBAAA,GAAoC;IADtE,EAEE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBADvB,QAAQ,EAEE,iCAAA;gBADV,IAAI,EAEE,EAAA,OAAE,EAAQ,iBAAA,EAAkB;aADnC,EAEC,EAAG;CADJ,CAEC;AADF;;GAEG;AACF,2BAAA,GAAA,cAAA,OAAA,EACA,EADA,CACA,CAAC;AAGF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;AAC5B,CAAC;AAED;;GAEG;AACH;IACA;;;OAGG;IACH,uBAfqB,SAAW,EAAkB,WAAa;QAA1C,cAAA,GAAA,SAAA,CAAW;QAAkB,gBAAA,GAAA,WAAA,CAAa;IAAW,CAAA;IAiB1E,oBAAC;AAAD,CAPA,AAOC,IAAA;;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;IAClC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC;AACpC,CAAC;AAED,MAAM,CA9BC,IAAA,gBAAA,CAAM,mBAAA,GAAsB,UAAA,CAAW,aAAC,CAAa,CAAC;AA+B7D;IArBC,qCAAA;IAsBD;;;OAGG;IACH,mBAxBG,QAAqB,EAAW,UAAY;eAyB3C,kBAAM,QAAQ,EAAE,UAAU,CAAC;IAC7B,CAAC;IAwBH,gBAAC;AAAD,CA/BA,AA+BC,CApDA,mBAAA;;AAMM,oBAAA,GAAoC;IAyB3C,EAxBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAyBvB,QAAQ,EAxBE,MAAA,CAAO,EAAC;gBAyBlB,QAAQ,EAxBE,yBAAA;gBAyBV,WAAW,EAxBE,cAAA;gBAyBb,SAAS,EAxBE,CAAA,aAAE,CAAa;gBAyB1B,MAAM,EAxBE,CAAA,OAAE,CAAO;gBAyBjB,IAAI,EAxBE;oBAyBJ,OAAO,EAxBE,aAAA;oBAyBT,MAAM,EAxBE,SAAA;iBAyBT;gBACD,eAAe,EAxBE,uBAAA,CAAwB,MAAC;gBAyB1C,aAAa,EAxBE,iBAAA,CAAkB,IAAC;aAyBnC,EAxBC,EAAG;CAyBJ,CAxBC;AAyBF;;GAEG;AAzBF,wBAAA,GAAA,cAAA,OAAA;IA2BD,EAAC,IAAI,EAAE,SAAS,GAAG;IACnB,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,EA7BA,CA6BA,CAAC;AAGF;IACA,gBAAgB;IAChB,SAAS,CAAC,UAAU,CAAC;IACrB;;;OAGG;IACH,SAAS,CAAC,cAAc,CAAC;AACzB,CAAC","file":"toolbar.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {'class': 'mat-toolbar-row'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarBase.prototype._renderer;\n/** @type {?} */\nMdToolbarBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdToolbarMixinBase = mixinColor(MdToolbarBase);\nexport class MdToolbar extends _MdToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}