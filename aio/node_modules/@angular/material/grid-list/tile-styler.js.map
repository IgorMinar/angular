{"version":3,"sources":["../../../../src/lib/grid-list/tile-styler.ts"],"names":[],"mappings":"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","file":"tile-styler.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method can be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] | null { return null; }\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    let /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n"]}