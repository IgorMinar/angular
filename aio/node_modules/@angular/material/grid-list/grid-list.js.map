{"version":3,"sources":["../../../../src/lib/grid-list/grid-list.ts"],"names":[],"mappings":"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","file":"grid-list.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '../core';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Directionality) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw Error(`md-grid-list: must pass in number of columns. ` +\n                      `Example: <md-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @return {?}\n */\nprivate _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    let /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    let /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string] | null): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}