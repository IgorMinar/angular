{"version":3,"sources":["../../../../src/lib/menu/menu-directive.ts"],"names":[],"mappings":"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","file":"menu-directive.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n  ChangeDetectionStrategy,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '../core/keyboard/keycodes';\nimport {merge} from 'rxjs/observable/merge';\nimport {Observable} from 'rxjs/Observable';\nimport {Direction} from '../core';\n\n/** Default `md-menu` options that can be overridden. */\nexport interface MdMenuDefaultOptions {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n}\n/**\n * Injection token to be used to override the default options for `md-menu`.\n */\nexport const MD_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MdMenuDefaultOptions>('md-menu-default-options');\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n */\nconst MD_MENU_BASE_ELEVATION = 2;\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager;\nprivate _xPosition: MenuPositionX = this._defaultOptions.xPosition;\nprivate _yPosition: MenuPositionY = this._defaultOptions.yPosition;\nprivate _previousElevation: string;\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription: Subscription;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Current state of the panel animation.\n */\n_panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n/**\n * Parent menu of the current menu panel.\n */\nparentMenu: MdMenuPanel | undefined;\n/**\n * Layout direction of the menu.\n */\ndirection: Direction;\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMdMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMdMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = this._defaultOptions.overlapTrigger;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void | 'click' | 'keydown'>();\n/**\n * @param {?} _elementRef\n * @param {?} _defaultOptions\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _defaultOptions: MdMenuDefaultOptions) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n\n    this.close.emit();\n    this.close.complete();\n  }\n/**\n * Stream that emits whenever the hovered menu item changes.\n * @return {?}\n */\nhover(): Observable<MdMenuItem> {\n    return merge(...this.items.map(item => item.hover));\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.close.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.close.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.close.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n/**\n * Sets the menu panel elevation.\n * @param {?} depth Number of parent menus that come before the menu.\n * @return {?}\n */\nsetElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const /** @type {?} */ newElevation = `mat-elevation-z${MD_MENU_BASE_ELEVATION + depth}`;\n    const /** @type {?} */ customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n/**\n * Starts the enter animation.\n * @return {?}\n */\n_startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n/**\n * Resets the panel animation to its initial state.\n * @return {?}\n */\n_resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n/**\n * Callback that is invoked when the panel animation completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_DEFAULT_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/** @type {?} */\nMdMenu.prototype._previousElevation;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/**\n * Current state of the panel animation.\n * @type {?}\n */\nMdMenu.prototype._panelAnimationState;\n/**\n * Parent menu of the current menu panel.\n * @type {?}\n */\nMdMenu.prototype.parentMenu;\n/**\n * Layout direction of the menu.\n * @type {?}\n */\nMdMenu.prototype.direction;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n/** @type {?} */\nMdMenu.prototype._elementRef;\n/** @type {?} */\nMdMenu.prototype._defaultOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}