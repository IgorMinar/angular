/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Output, EventEmitter, Input, Injectable, Optional, ChangeDetectorRef, } from '@angular/core';
import { UniqueSelectionDispatcher } from '../core';
import { CdkAccordion } from './accordion';
/**
 * Used to generate unique ID for each expansion panel.
 */
var nextId = 0;
/**
 * An abstract class to be extended and decorated as a component.  Sets up all
 * events and attributes needed to be managed by a CdkAccordion parent.
 */
var AccordionItem = (function () {
    /**
     * @param {?} accordion
     * @param {?} _changeDetectorRef
     * @param {?} _expansionDispatcher
     */
    function AccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {
        var _this = this;
        this.accordion = accordion;
        this._changeDetectorRef = _changeDetectorRef;
        this._expansionDispatcher = _expansionDispatcher;
        /**
         * Event emitted every time the MdAccordionChild is closed.
         */
        this.closed = new EventEmitter();
        /**
         * Event emitted every time the MdAccordionChild is opened.
         */
        this.opened = new EventEmitter();
        /**
         * Event emitted when the MdAccordionChild is destroyed.
         */
        this.destroyed = new EventEmitter();
        /**
         * The unique MdAccordionChild id.
         */
        this.id = "cdk-accordion-child-" + nextId++;
        /**
         * Unregister function for _expansionDispatcher *
         */
        this._removeUniqueSelectionListener = function () { };
        this._removeUniqueSelectionListener =
            _expansionDispatcher.listen(function (id, accordionId) {
                if (_this.accordion && !_this.accordion.multi &&
                    _this.accordion.id === accordionId && _this.id !== id) {
                    _this.expanded = false;
                }
            });
    }
    Object.defineProperty(AccordionItem.prototype, "expanded", {
        /**
         * Whether the MdAccordionChild is expanded.
         * @return {?}
         */
        get: function () { return this._expanded; },
        /**
         * @param {?} expanded
         * @return {?}
         */
        set: function (expanded) {
            // Only emit events and update the internal value if the value changes.
            if (this._expanded !== expanded) {
                this._expanded = expanded;
                if (expanded) {
                    this.opened.emit();
                    /**
                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,
                     * the name value is the id of the accordion.
                     */
                    var accordionId = this.accordion ? this.accordion.id : this.id;
                    this._expansionDispatcher.notify(this.id, accordionId);
                }
                else {
                    this.closed.emit();
                }
                // Ensures that the animation will run when the value is set outside of an `@Input`.
                // This includes cases like the open, close and toggle methods.
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Emits an event for the accordion item being destroyed.
     * @return {?}
     */
    AccordionItem.prototype.ngOnDestroy = function () {
        this.destroyed.emit();
        this._removeUniqueSelectionListener();
    };
    /**
     * Toggles the expanded state of the accordion item.
     * @return {?}
     */
    AccordionItem.prototype.toggle = function () {
        this.expanded = !this.expanded;
    };
    /**
     * Sets the expanded state of the accordion item to false.
     * @return {?}
     */
    AccordionItem.prototype.close = function () {
        this.expanded = false;
    };
    /**
     * Sets the expanded state of the accordion item to true.
     * @return {?}
     */
    AccordionItem.prototype.open = function () {
        this.expanded = true;
    };
    return AccordionItem;
}());
export { AccordionItem };
AccordionItem.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AccordionItem.ctorParameters = function () { return [
    { type: CdkAccordion, decorators: [{ type: Optional },] },
    { type: ChangeDetectorRef, },
    { type: UniqueSelectionDispatcher, },
]; };
AccordionItem.propDecorators = {
    'closed': [{ type: Output },],
    'opened': [{ type: Output },],
    'destroyed': [{ type: Output },],
    'expanded': [{ type: Input },],
};
function AccordionItem_tsickle_Closure_declarations() {
    /** @type {?} */
    AccordionItem.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    AccordionItem.ctorParameters;
    /** @type {?} */
    AccordionItem.propDecorators;
    /**
     * Event emitted every time the MdAccordionChild is closed.
     * @type {?}
     */
    AccordionItem.prototype.closed;
    /**
     * Event emitted every time the MdAccordionChild is opened.
     * @type {?}
     */
    AccordionItem.prototype.opened;
    /**
     * Event emitted when the MdAccordionChild is destroyed.
     * @type {?}
     */
    AccordionItem.prototype.destroyed;
    /**
     * The unique MdAccordionChild id.
     * @type {?}
     */
    AccordionItem.prototype.id;
    /** @type {?} */
    AccordionItem.prototype._expanded;
    /**
     * Unregister function for _expansionDispatcher *
     * @type {?}
     */
    AccordionItem.prototype._removeUniqueSelectionListener;
    /** @type {?} */
    AccordionItem.prototype.accordion;
    /** @type {?} */
    AccordionItem.prototype._changeDetectorRef;
    /** @type {?} */
    AccordionItem.prototype._expansionDispatcher;
}
//# sourceMappingURL=accordion-item.js.map