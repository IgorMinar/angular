/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Component, Directive, Host, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Renderer2, ElementRef, } from '@angular/core';
import { trigger, state, style, transition, animate, } from '@angular/animations';
import { SPACE, ENTER } from '../core/keyboard/keycodes';
import { MdExpansionPanel, EXPANSION_PANEL_ANIMATION_TIMING } from './expansion-panel';
import { filter } from '../core/rxjs/index';
import { FocusOriginMonitor } from '../core/style/index';
import { merge } from 'rxjs/observable/merge';
/**
 * <md-expansion-panel-header> component.
 *
 * This component corresponds to the header element of an <md-expansion-panel>.
 *
 * Please refer to README.md for examples on how to use it.
 */
var MdExpansionPanelHeader = (function () {
    /**
     * @param {?} panel
     * @param {?} _renderer
     * @param {?} _element
     * @param {?} _focusOriginMonitor
     * @param {?} _changeDetectorRef
     */
    function MdExpansionPanelHeader(panel, _renderer, _element, _focusOriginMonitor, _changeDetectorRef) {
        var _this = this;
        this.panel = panel;
        this._renderer = _renderer;
        this._element = _element;
        this._focusOriginMonitor = _focusOriginMonitor;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentChangeSubscription = null;
        // Since the toggle state depends on an @Input on the panel, we
        // need to  subscribe and trigger change detection manually.
        this._parentChangeSubscription = merge(panel.opened, panel.closed, filter.call(panel._inputChanges, function (changes) { return !!changes.hideToggle; }))
            .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });
        _focusOriginMonitor.monitor(_element.nativeElement, _renderer, false);
    }
    /**
     * Toggles the expanded state of the panel.
     * @return {?}
     */
    MdExpansionPanelHeader.prototype._toggle = function () {
        this.panel.toggle();
    };
    /**
     * Gets whether the panel is expanded.
     * @return {?}
     */
    MdExpansionPanelHeader.prototype._isExpanded = function () {
        return this.panel.expanded;
    };
    /**
     * Gets the expanded state string of the panel.
     * @return {?}
     */
    MdExpansionPanelHeader.prototype._getExpandedState = function () {
        return this.panel._getExpandedState();
    };
    /**
     * Gets the panel id.
     * @return {?}
     */
    MdExpansionPanelHeader.prototype._getPanelId = function () {
        return this.panel.id;
    };
    /**
     * Gets whether the expand indicator is hidden.
     * @return {?}
     */
    MdExpansionPanelHeader.prototype._getHideToggle = function () {
        return this.panel.hideToggle;
    };
    /**
     * Handle keyup event calling to toggle() if appropriate.
     * @param {?} event
     * @return {?}
     */
    MdExpansionPanelHeader.prototype._keyup = function (event) {
        switch (event.keyCode) {
            // Toggle for space and enter keys.
            case SPACE:
            case ENTER:
                event.preventDefault();
                this._toggle();
                break;
            default:
                return;
        }
    };
    /**
     * @return {?}
     */
    MdExpansionPanelHeader.prototype.ngOnDestroy = function () {
        if (this._parentChangeSubscription) {
            this._parentChangeSubscription.unsubscribe();
            this._parentChangeSubscription = null;
        }
        this._focusOriginMonitor.stopMonitoring(this._element.nativeElement);
    };
    return MdExpansionPanelHeader;
}());
export { MdExpansionPanelHeader };
MdExpansionPanelHeader.decorators = [
    { type: Component, args: [{selector: 'md-expansion-panel-header, mat-expansion-panel-header',
                styles: [".mat-expansion-panel-header{cursor:pointer;display:flex;flex-direction:row;height:48px;line-height:48px;padding:0 24px}.mat-expansion-panel-header.mat-expanded{height:64px;line-height:64px}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}"],
                template: "<span class=\"mat-content\"><ng-content select=\"md-panel-title, mat-panel-title\"></ng-content><ng-content select=\"md-panel-description, mat-panel-description\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"!_getHideToggle()\" class=\"mat-expansion-indicator\"></span>",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    'class': 'mat-expansion-panel-header',
                    'role': 'button',
                    'tabindex': '0',
                    '[attr.aria-controls]': '_getPanelId()',
                    '[attr.aria-expanded]': '_isExpanded()',
                    '[class.mat-expanded]': '_isExpanded()',
                    '(click)': '_toggle()',
                    '(keyup)': '_keyup($event)',
                    '[@expansionHeight]': '_getExpandedState()',
                },
                animations: [
                    trigger('indicatorRotate', [
                        state('collapsed', style({ transform: 'rotate(0deg)' })),
                        state('expanded', style({ transform: 'rotate(180deg)' })),
                        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
                    ]),
                    trigger('expansionHeight', [
                        state('collapsed', style({ height: '48px', 'line-height': '48px' })),
                        state('expanded', style({ height: '64px', 'line-height': '64px' })),
                        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
                    ]),
                ],
            },] },
];
/**
 * @nocollapse
 */
MdExpansionPanelHeader.ctorParameters = function () { return [
    { type: MdExpansionPanel, decorators: [{ type: Host },] },
    { type: Renderer2, },
    { type: ElementRef, },
    { type: FocusOriginMonitor, },
    { type: ChangeDetectorRef, },
]; };
function MdExpansionPanelHeader_tsickle_Closure_declarations() {
    /** @type {?} */
    MdExpansionPanelHeader.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdExpansionPanelHeader.ctorParameters;
    /** @type {?} */
    MdExpansionPanelHeader.prototype._parentChangeSubscription;
    /** @type {?} */
    MdExpansionPanelHeader.prototype.panel;
    /** @type {?} */
    MdExpansionPanelHeader.prototype._renderer;
    /** @type {?} */
    MdExpansionPanelHeader.prototype._element;
    /** @type {?} */
    MdExpansionPanelHeader.prototype._focusOriginMonitor;
    /** @type {?} */
    MdExpansionPanelHeader.prototype._changeDetectorRef;
}
/**
 * <md-panel-description> directive.
 *
 * This direction is to be used inside of the MdExpansionPanelHeader component.
 */
var MdExpansionPanelDescription = (function () {
    function MdExpansionPanelDescription() {
    }
    return MdExpansionPanelDescription;
}());
export { MdExpansionPanelDescription };
MdExpansionPanelDescription.decorators = [
    { type: Directive, args: [{
                selector: 'md-panel-description, mat-panel-description',
                host: {
                    class: 'mat-expansion-panel-header-description'
                }
            },] },
];
/**
 * @nocollapse
 */
MdExpansionPanelDescription.ctorParameters = function () { return []; };
function MdExpansionPanelDescription_tsickle_Closure_declarations() {
    /** @type {?} */
    MdExpansionPanelDescription.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdExpansionPanelDescription.ctorParameters;
}
/**
 * <md-panel-title> directive.
 *
 * This direction is to be used inside of the MdExpansionPanelHeader component.
 */
var MdExpansionPanelTitle = (function () {
    function MdExpansionPanelTitle() {
    }
    return MdExpansionPanelTitle;
}());
export { MdExpansionPanelTitle };
MdExpansionPanelTitle.decorators = [
    { type: Directive, args: [{
                selector: 'md-panel-title, mat-panel-title',
                host: {
                    class: 'mat-expansion-panel-header-title'
                }
            },] },
];
/**
 * @nocollapse
 */
MdExpansionPanelTitle.ctorParameters = function () { return []; };
function MdExpansionPanelTitle_tsickle_Closure_declarations() {
    /** @type {?} */
    MdExpansionPanelTitle.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdExpansionPanelTitle.ctorParameters;
}
//# sourceMappingURL=expansion-panel-header.js.map