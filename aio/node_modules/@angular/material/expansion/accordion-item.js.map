{"version":3,"sources":["../../../../src/lib/expansion/accordion-item.ts"],"names":[],"mappings":"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","file":"accordion-item.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Output,\n  EventEmitter,\n  Input,\n  Injectable,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '../core';\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the MdAccordionChild is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the MdAccordionChild is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the MdAccordionChild is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique MdAccordionChild id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the MdAccordionChild is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      if (expanded) {\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n * the name value is the id of the accordion.\n */\nconst accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _expanded: boolean;\n/**\n * Unregister function for _expansionDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\nprivate _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n  }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyed.emit();\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\n    this.expanded = !this.expanded;\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\n    this.expanded = false;\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\n    this.expanded = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the MdAccordionChild is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the MdAccordionChild is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the MdAccordionChild is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique MdAccordionChild id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/**\n * Unregister function for _expansionDispatcher *\n * @type {?}\n */\nAccordionItem.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._changeDetectorRef;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}