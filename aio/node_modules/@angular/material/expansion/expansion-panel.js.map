{"version":3,"sources":["../../../../src/lib/expansion/expansion-panel.ts"],"names":[],"mappings":"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","file":"expansion-panel.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  Input,\n  ViewEncapsulation,\n  Optional,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SimpleChanges,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {MdAccordion, MdAccordionDisplayMode} from './accordion';\nimport {AccordionItem} from './accordion-item';\nimport {UniqueSelectionDispatcher} from '../core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** MdExpansionPanel's states. */\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\n * \n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends AccordionItem implements OnChanges, OnDestroy {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n */\n_inputChanges = new Subject<SimpleChanges>();\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n/**\n * Gets the panel's display mode.\n * @return {?}\n */\n_getDisplayMode(): MdAccordionDisplayMode | MdExpansionPanelState | 'void' {\n    if (this.accordion) {\n      return this.expanded ? this.accordion.displayMode : this._getExpandedState();\n    }\n\n    return 'void';\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._inputChanges.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'md-expansion-panel, mat-expansion-panel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[@displayMode]': '_getDisplayMode()',\n  },\n  providers: [\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px', visibility: 'hidden'})),\n      state('expanded', style({height: '*', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('displayMode', [\n      state('flat, collapsed', style({margin: '0'})),\n      state('default', style({margin: '16px 0'})),\n      transition('flat <=> collapsed, default <=> collapsed, flat <=> default',\n                 animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n * @type {?}\n */\nMdExpansionPanel.prototype._inputChanges;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-action-row, md-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}