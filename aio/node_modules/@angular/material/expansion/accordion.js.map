{"version":3,"sources":["../../../../src/lib/expansion/accordion.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAGH,OADO,EAAA,SAAE,EAAU,KAAA,EAAM,MAAA,eAAA,CAAA;AAEzB,OADO,EAAA,qBAAE,EAAqB,MAAA,uBAAA,CAAA;AAK9B;;GAEG;AACH,IAFC,MAAA,GAAA,CAAA,CAAA;AAGD;;GAEG;AACH;IAAA;QACA;;WAEG;QADA,OAAA,GAAA,mBAAA,MAAA,EAAA,CAAA;QAKO,WAAA,GAAmB,KAAA,CAAM;QAKzB,gBAAA,GAAwB,KAAA,CAAM;QAexC;;;;;;;WAOG;QACH,gBAbI,GAAA,SAAA,CAAA;IA6BJ,CAAC;IA1CD,sBAJI,+BAAA;QAAJ;;;WAGG;aACH,cAJ0B,MAAA,CAAO,IAAA,CAAK,MAAC,CAAM,CAAC,CAAA;QAK9C;;;WAGG;aACH,UARG,KAAA,IAA2B,IAAA,CAAK,MAAC,GAAQ,qBAAA,CAAsB,KAAC,CAAK,CAAC,CAAC,CAAA;;;OAD5B;IAe9C,sBAVI,oCAAA;QAMJ;;;WAGG;aACH,cAV+B,MAAA,CAAO,IAAA,CAAK,WAAC,CAAW,CAAC,CAAA;QAWxD;;;WAGG;aACH,UAdG,IAAA,IAA+B,IAAA,CAAK,WAAC,GAAa,qBAAA,CAAsB,IAAC,CAAI,CAAC,CAAC,CAAA;;;OAD1B;IAyCxD,mBAAC;AAAD,CAnDA,AAmDC;;AA5BM,uBAAA,GAAoC;IAc3C,EAbE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAcvB,QAAQ,EAbE,gCAAA;aAcX,EAbC,EAAG;CAcJ,CAbC;AAcF;;GAEG;AAdF,2BAAA,GAAA,cAAA,OAAA,EAgBA,EAhBA,CAgBA,CAAC;AAdK,2BAAA,GAAyD;IAgBhE,OAAO,EAfE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAgB1B,YAAY,EAfE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAgB/B,aAAa,EAfE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAgB/B,CAfC;AAkBF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,cAAc,CAAC;IAC5B;;;OAGG;IACH,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC;IAC1B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;IAC9B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC;IACnC;;;;;;;;OAQG;IACH,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC;AACnC,CAAC;AAED;;GAEG;AACH;IA7CC,uCAAA;IA6CD;;IAaA,CAAC;IAAD,kBAAC;AAAD,CAbA,AAaC,CA1DA,YAAA;;AAAqD,sBAAA,GAAoC;IA8C1F,EA7CE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA8CvB,QAAQ,EA7CE,6BAAA;gBA8CV,IAAI,EA7CE;oBA8CJ,KAAK,EA7CE,eAAA;iBA8CR;aACF,EA7CC,EAAG;CA8CJ,CA7CC;AA8CF;;GAEG;AA9CF,0BAAA,GAAA,cAAA,OAAA,EAgDA,EAhDA,CAgDA,CAAC;AAGF;IACA,gBAAgB;IAChB,WAAW,CAAC,UAAU,CAAC;IACvB;;;OAGG;IACH,WAAW,CAAC,cAAc,CAAC;AAC3B,CAAC","file":"accordion.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** MdAccordion's display modes. */\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-accordion, [cdk-accordion]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-accordion, md-accordion',\n  host: {\n    class: 'mat-accordion'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}