{"version":3,"sources":["../../../../src/lib/icon/icon.ts"],"names":[],"mappings":"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","file":"icon.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {MdIconRegistry} from './icon-registry';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {first} from '../core/rxjs/index';\n/**\n * \\@docs-private\n */\nexport class MdIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconBase.prototype._renderer;\n/** @type {?} */\nMdIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdIconMixinBase = mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon extends _MdIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _mdIconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _mdIconRegistry: MdIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        // Use default namespace.\n        return ['', parts[0]];\n      case 2:\n        return /** @type {?} */(( <[string, string]>parts));\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon && this.svgIcon) {\n      const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n      first.call(this._mdIconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    const /** @type {?} */ childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let /** @type {?} */ i = 0; i < childCount; i++) {\n      this._renderer.removeChild(layoutElement, layoutElement.childNodes[i]);\n    }\n\n    this._renderer.appendChild(layoutElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}