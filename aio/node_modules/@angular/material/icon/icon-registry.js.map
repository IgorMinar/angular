{"version":3,"sources":["../../../../src/lib/icon/icon-registry.ts"],"names":[],"mappings":"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","file":"icon-registry.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, SecurityContext, Optional, SkipSelf} from '@angular/core';\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\nimport {Http} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {RxChain, map, doOperator, catchOperator, finallyOperator, share} from '../core/rxjs/index';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<md-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n               'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nexport function getMdIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MdIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\n      .call(map, svg => cloneSvg(svg))\n      .result();\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return RxChain.from(this._loadSvgIconFromConfig(config))\n          .call(doOperator, svg => config.svgElement = svg)\n          .call(map, svg => cloneSvg(svg))\n          .result();\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n          .call(doOperator, svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n          .result();\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMdIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMdIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\n      .call(map, response => response.text())\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\n      .call(share)\n      .result();\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\n/**\n * \\@docs-private\n */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}