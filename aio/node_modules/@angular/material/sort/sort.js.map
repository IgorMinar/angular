{"version":3,"sources":["../../../../src/lib/sort/sort.ts"],"names":[],"mappings":"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","file":"sort.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\nimport {SortDirection} from './sort-direction';\nimport {coerceBooleanProperty} from '../core';\nimport {getMdSortDuplicateMdSortableIdError, getMdSortHeaderMissingIdError} from './sort-errors';\n\nexport interface MdSortable {\n  id: string;\n  start: 'asc' | 'desc';\n  disableClear: boolean;\n}\n\nexport interface Sort {\n  active: string;\n  direction: SortDirection;\n}\n/**\n * Container for MdSortables to manage the sort state and provide default sort parameters.\n */\nexport class MdSort {\n/**\n * Collection of all registered sortables that this directive manages.\n */\nsortables = new Map<string, MdSortable>();\n/**\n * The id of the most recently sorted MdSortable.\n */\nactive: string;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n */\nstart: 'asc' | 'desc' = 'asc';\n/**\n * The sort direction of the currently active MdSortable.\n */\ndirection: SortDirection = '';\n/**\n * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n * May be overriden by the MdSortable's disable clear input.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _matSortActive() { return this.active; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortActive(v) { this.active = v; }\n/**\n * @return {?}\n */\nget _matSortStart() { return this.start; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortStart(v) { this.start = v; }\n/**\n * @return {?}\n */\nget _matSortDirection() { return this.direction; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDirection(v) { this.direction = v; }\n/**\n * @return {?}\n */\nget _matSortDisableClear() { return this.disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDisableClear(v) { this.disableClear = v; }\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n */\nmdSortChange = new EventEmitter<Sort>();\n/**\n * Register function to be used by the contained MdSortables. Adds the MdSortable to the\n * collection of MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nregister(sortable: MdSortable) {\n    if (!sortable.id) {\n      throw getMdSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getMdSortDuplicateMdSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n/**\n * Unregister function to be used by the contained MdSortables. Removes the MdSortable from the\n * collection of contained MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nderegister(sortable: MdSortable) {\n    this.sortables.delete(sortable.id);\n  }\n/**\n * Sets the active sort id and determines the new sort direction.\n * @param {?} sortable\n * @return {?}\n */\nsort(sortable: MdSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.mdSortChange.next({active: this.active, direction: this.direction});\n  }\n/**\n * Returns the next sort direction of the active sortable, checking for potential overrides.\n * @param {?} sortable\n * @return {?}\n */\ngetNextSortDirection(sortable: MdSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSort], [matSort]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['mdSortActive', ] },],\n'start': [{ type: Input, args: ['mdSortStart', ] },],\n'direction': [{ type: Input, args: ['mdSortDirection', ] },],\n'disableClear': [{ type: Input, args: ['mdSortDisableClear', ] },],\n'_matSortActive': [{ type: Input, args: ['matSortActive', ] },],\n'_matSortStart': [{ type: Input, args: ['matSortStart', ] },],\n'_matSortDirection': [{ type: Input, args: ['matSortDirection', ] },],\n'_matSortDisableClear': [{ type: Input, args: ['matSortDisableClear', ] },],\n'mdSortChange': [{ type: Output },],\n};\n}\n\nfunction MdSort_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSort.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSort.ctorParameters;\n/** @type {?} */\nMdSort.propDecorators;\n/**\n * Collection of all registered sortables that this directive manages.\n * @type {?}\n */\nMdSort.prototype.sortables;\n/**\n * The id of the most recently sorted MdSortable.\n * @type {?}\n */\nMdSort.prototype.active;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n * @type {?}\n */\nMdSort.prototype.start;\n/**\n * The sort direction of the currently active MdSortable.\n * @type {?}\n */\nMdSort.prototype.direction;\n/** @type {?} */\nMdSort.prototype._disableClear;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n * @type {?}\n */\nMdSort.prototype.mdSortChange;\n}\n\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let /** @type {?} */ sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}