{"version":3,"sources":["../../../../src/lib/sort/sort-header-intl.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OADO,EAAA,UAAE,EAAW,YAAA,EAAa,MAAA,eAAA,CAAA;AAGjC;;;GAGG;AACH;IAAA;QACA;;;WAGG;QACH,YACG,GAAA,IAAA,YAAA,EAAA,CAAA;QAAH;;WAEG;QACH,oBAAG,GAAA,UAAA,EAAA;YACC,MAAM,CAAC,wBAAsB,EAAI,CAAC;QACpC,CAAC,CAAA;QACH;;WAEG;QACH,yBADG,GAAA,UAAA,EAAA,EAAA,SAAA;YAEC,MAAM,CAAC,eAAa,EAAE,UAAI,SAAS,IAAI,KAAK,GAAG,WAAW,GAAG,YAAY,CAAE,CAAC;QAC9E,CAAC,CAAA;IASH,CAAC;IAAD,uBAAC;AAAD,CA1BA,AA0BC;;AATM,2BAAA,GAAoC;IAE3C,EADE,IAAA,EAAM,UAAA,EAAW;CAElB,CADC;AAEF;;GAJE;AAID,+BAAA,GAAA,cAAA,OAAA,EAIA,EAJA,CAIA,CAAC;AAGF;IACA,gBAAgB;IAChB,gBAAgB,CAAC,UAAU,CAAC;IAC5B;;;OAGG;IACH,gBAAgB,CAAC,cAAc,CAAC;IAChC;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC;IACnC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,eAAe,CAAC;IAC3C;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,oBAAoB,CAAC;AAChD,CAAC","file":"sort-header-intl.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, EventEmitter} from '@angular/core';\nimport {SortDirection} from './sort-direction';\n/**\n * To modify the labels and text displayed, create a new instance of MdSortHeaderIntl and\n * include it in a custom provider.\n */\nexport class MdSortHeaderIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: EventEmitter<void> = new EventEmitter<void>();\n/**\n * ARIA label for the sorting button.\n */\nsortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n/**\n * A label to describe the current sort (visible only to screenreaders).\n */\nsortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortHeaderIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeaderIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeaderIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.changes;\n/**\n * ARIA label for the sorting button.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortButtonLabel;\n/**\n * A label to describe the current sort (visible only to screenreaders).\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}