{"version":3,"sources":["../../../../src/lib/input/autosize.ts"],"names":[],"mappings":"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","file":"autosize.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, AfterViewInit, Optional, Self} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit {\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n */\nprivate _previousValue: string;\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n * @param {?} _platform\n * @param {?} formControl\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _platform: Platform,\n      formControl: NgControl) {\n\n    if (formControl && formControl.valueChanges) {\n      formControl.valueChanges.subscribe(() => this.resizeToFitContent());\n    }\n  }\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._cacheTextareaLineHeight();\n      this.resizeToFitContent();\n    }\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden'; /** @type {?} */((\n\n    textarea.parentNode)).appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */((\n    textarea.parentNode)).removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    if (textarea.value === this._previousValue) {\n      return;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n\n    this._previousValue = textarea.value;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n * @type {?}\n */\nMdTextareaAutosize.prototype._previousValue;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n/** @type {?} */\nMdTextareaAutosize.prototype._platform;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}