{"version":3,"sources":["../../../../../src/lib/core/datetime/date-adapter.ts"],"names":[],"mappings":"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","file":"date-adapter.js","sourceRoot":"","sourcesContent":["\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to format.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The formatted date string.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n * date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ngetISODateString(date: D) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\n * @abstract\n * @param {?} obj The object to check\n * @return {?} Whether the object is a date instance.\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\n * @abstract\n * @param {?} date The date to check.\n * @return {?} Whether the date is valid.\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n}\n\n"]}