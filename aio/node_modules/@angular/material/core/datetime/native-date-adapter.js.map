{"version":3,"sources":["../../../../../src/lib/core/datetime/native-date-adapter.ts"],"names":[],"mappings":"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","file":"native-date-adapter.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional, LOCALE_ID} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} localeId\n */\nconstructor(  localeId: any) {\n    super();\n    super.setLocale(localeId);\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\n      }\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetISODateString(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}