{"version":3,"sources":["../../../../../src/lib/core/a11y/focus-key-manager.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAIH,OADO,EAAA,cAAE,EAA0B,MAAA,oBAAA,CAAA;AAUnC;IACC,2CAAA;IAAD;;OAEG;IACH,yBADG,KAAsC;eAErC,kBAAM,KAAK,CAAC;IACd,CAAC;IACH;;;;;OAKG;IACH,uCAFG,GAEH,UAFG,KAAA;QAGC,iBAFM,aAAC,YAAa,KAAC,CAAK,CAAC;QAI3B,EAAE,CAAC,CAAC,IAFC,CAAI,UAAC,CAAU,CAAC,CAAA;YAGnB,IAAI,CAFC,UAAC,CAAU,KAAC,EAAK,CAAE;QAG1B,CAAC;IACH,CAAC;IAEH,sBAAC;AAAD,CArBA,AAqBC,CApBA,cAAA,GAoBA","file":"focus-key-manager.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself and whether or not it is currently disabled.\n */\nexport interface Focusable extends CanDisable {\n  focus(): void;\n}\nexport class FocusKeyManager extends ListKeyManager<Focusable> {\n/**\n * @param {?} items\n */\nconstructor(items: QueryList<Focusable>) {\n    super(items);\n  }\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds focuses the newly active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.focus();\n    }\n  }\n\n}\n"]}