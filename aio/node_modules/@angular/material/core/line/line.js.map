{"version":3,"sources":["../../../../../src/lib/core/line/line.ts"],"names":[],"mappings":"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","file":"line.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}