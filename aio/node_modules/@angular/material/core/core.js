/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgModule } from '@angular/core';
import { ObserveContentModule } from '@angular/cdk/observe-content';
import { MdLineModule } from './line/line';
import { BidiModule } from './bidi/index';
import { MdOptionModule } from './option/index';
import { PortalModule } from './portal/portal-directives';
import { OverlayModule } from './overlay/index';
import { A11yModule } from './a11y/index';
import { MdSelectionModule } from './selection/index';
import { MdRippleModule } from './ripple/index';
// Re-exports of the CDK to avoid breaking changes.
export { coerceBooleanProperty, coerceNumberProperty, } from '@angular/cdk/coercion';
export { ObserveContentModule, ObserveContent, } from '@angular/cdk/observe-content';
// RTL
export { Dir, Directionality, BidiModule } from './bidi/index';
export { MdOptionModule, MdOptionSelectionChange, MdOption, MdOptgroupBase, _MdOptgroupMixinBase, MdOptgroup } from './option/index';
// Portals
export { Portal, BasePortalHost, ComponentPortal, TemplatePortal } from './portal/portal';
export { PortalHostDirective, TemplatePortalDirective, PortalModule, } from './portal/portal-directives';
export { DomPortalHost } from './portal/dom-portal-host';
// Platform
export { PlatformModule, Platform, getSupportedInputTypes } from './platform/index';
// Overlay
export { OVERLAY_PROVIDERS, OverlayModule, Overlay, OverlayContainer, FullscreenOverlayContainer, OverlayRef, OverlayState, ConnectedOverlayDirective, OverlayOrigin, ViewportRuler, GlobalPositionStrategy, ConnectedPositionStrategy, ConnectionPositionPair, ScrollableViewProperties, ConnectedOverlayPositionChange, Scrollable, ScrollDispatcher, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, ScrollDispatchModule } from './overlay/index';
// Gestures
export { GestureConfig } from './gestures/gesture-config';
// Ripple
export { MdRipple, MD_RIPPLE_GLOBAL_OPTIONS, RippleRef, RippleState, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION, MdRippleModule } from './ripple/index';
// a11y
export { LiveAnnouncer, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_PROVIDER, } from './a11y/live-announcer';
// Selection
export { SelectionModel, SelectionChange } from './selection/selection';
export { FocusTrap, FocusTrapFactory, FocusTrapDeprecatedDirective, FocusTrapDirective } from './a11y/focus-trap';
export { InteractivityChecker } from './a11y/interactivity-checker';
export { isFakeMousedownFromScreenReader } from './a11y/fake-mousedown';
export { A11yModule } from './a11y/index';
export { UniqueSelectionDispatcher, UNIQUE_SELECTION_DISPATCHER_PROVIDER, } from './coordination/unique-selection-dispatcher';
export { MdLineModule, MdLine, MdLineSetter } from './line/line';
// Style
export { StyleModule, TOUCH_BUFFER_MS, FocusOriginMonitor, CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY, FOCUS_ORIGIN_MONITOR_PROVIDER, applyCssTransform } from './style/index';
// Keybindings
export { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, PAGE_UP, PAGE_DOWN, HOME, END, ENTER, SPACE, TAB, ESCAPE, BACKSPACE, DELETE } from './keyboard/keycodes';
export { MATERIAL_COMPATIBILITY_MODE, getMdCompatibilityInvalidPrefixError, MAT_ELEMENTS_SELECTOR, MD_ELEMENTS_SELECTOR, MatPrefixRejector, MdPrefixRejector } from './compatibility/compatibility';
// Animation
export { AnimationCurves, AnimationDurations } from './animation/animation';
// Selection
export { MdSelectionModule, MdPseudoCheckbox } from './selection/index';
// Compatibility
export { CompatibilityModule, NoConflictStyleCompatibilityMode } from './compatibility/compatibility';
// Common material module
export { MdCommonModule, MATERIAL_SANITY_CHECKS } from './common-behaviors/common-module';
// Datetime
export { NativeDateModule, MdNativeDateModule, DateAdapter, MD_DATE_FORMATS, NativeDateAdapter, MD_NATIVE_DATE_FORMATS } from './datetime/index';
// Placeholder
export { MD_PLACEHOLDER_GLOBAL_OPTIONS } from './placeholder/placeholder-options';
// Error
export { MD_ERROR_GLOBAL_OPTIONS, defaultErrorStateMatcher, showOnDirtyErrorStateMatcher } from './error/error-options';
var MdCoreModule = (function () {
    function MdCoreModule() {
    }
    return MdCoreModule;
}());
export { MdCoreModule };
MdCoreModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    MdLineModule,
                    BidiModule,
                    MdRippleModule,
                    ObserveContentModule,
                    PortalModule,
                    OverlayModule,
                    A11yModule,
                    MdOptionModule,
                    MdSelectionModule,
                ],
                exports: [
                    MdLineModule,
                    BidiModule,
                    MdRippleModule,
                    ObserveContentModule,
                    PortalModule,
                    OverlayModule,
                    A11yModule,
                    MdOptionModule,
                    MdSelectionModule,
                ],
            },] },
];
/**
 * @nocollapse
 */
MdCoreModule.ctorParameters = function () { return []; };
function MdCoreModule_tsickle_Closure_declarations() {
    /** @type {?} */
    MdCoreModule.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdCoreModule.ctorParameters;
}
//# sourceMappingURL=core.js.map