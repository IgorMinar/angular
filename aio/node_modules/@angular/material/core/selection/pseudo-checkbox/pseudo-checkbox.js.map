{"version":3,"sources":["../../../../../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OADO,EAAA,SAAE,EAAU,iBAAA,EAAmB,KAAA,EAAO,uBAAA,EAAwB,MAAA,eAAA,CAAA;AAIrE;;;;;;;;;;;;GAYG;AACH;IAAA;QACA;;WAEG;QACH,UADI,GAAA,WAAA,CAAA;QAEJ;;WAEG;QACH,aAFI,GAAA,KAAA,CAAA;IA4BJ,CAAC;IAAD,uBAAC;AAAD,CAlCA,AAkCC;;AA3BM,2BAAA,GAAoC;IAG3C,EAFE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAGvB,QAAQ,EAFE,MAAA,CAAO,EAAC;gBAGlB,aAAa,EAFE,iBAAA,CAAkB,IAAC;gBAGlC,eAAe,EAFE,uBAAA,CAAwB,MAAC;gBAG1C,QAAQ,EAFE,yCAAA;gBAGV,SAAS,EAFE,CAAA,qBAAE,CAAqB;gBAGlC,QAAQ,EAFE,EAAA;gBAGV,IAAI,EAFE;oBAGJ,OAAO,EAFE,qBAAA;oBAGT,2CAA2C,EAFE,2BAAA;oBAG7C,qCAAqC,EAFE,qBAAA;oBAGvC,sCAAsC,EAFE,UAAA;iBAGzC;aACF,EAFC,EAAG;CAGJ,CAFC;AAGF;;GAEG;AAHF,+BAAA,GAAA,cAAA,OAAA,EAKA,EALA,CAKA,CAAC;AAHK,+BAAA,GAAyD;IAKhE,OAAO,EAJE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAK1B,UAAU,EAJE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAK5B,CAJC;AAOF;IACA,gBAAgB;IAChB,gBAAgB,CAAC,UAAU,CAAC;IAC5B;;;OAGG;IACH,gBAAgB,CAAC,cAAc,CAAC;IAChC,gBAAgB;IAChB,gBAAgB,CAAC,cAAc,CAAC;IAChC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC;IACjC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC;AACpC,CAAC","file":"pseudo-checkbox.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}