{"version":3,"sources":["../../../../../src/lib/core/option/option.ts"],"names":[],"mappings":"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","file":"option.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (value !== this._multiple) {\n      this._multiple = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    const /** @type {?} */ element = this._getHostElement();\n\n    if ('focus' in element) {\n      element.focus();\n    }\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Fetches the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}