{"version":3,"sources":["../../../../../src/lib/core/coordination/unique-selection-dispatcher.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OADO,EAAA,UAAE,EAAW,QAAA,EAAU,QAAA,EAAS,MAAA,eAAA,CAAA;AAMvC;;;;;;;;GAQG;AACH;IAAA;QAEU,eAAA,GAAkD,EAAA,CAAG;IAiC/D,CAAC;IAjCD;;;;;OAKG;IACH,0CACG,GADH,UACG,EAAA,EAAA,IAAA;QAAC,GAAG,CAAC,CACiB,UAAM,EAAN,KAAA,IAAA,CAAK,UAAC,EAAN,cAAM,EAAN,IAAM;YADtB,IACI,QAAA,SAAA;YAAP,QAAQ,CACC,EAAC,EAAG,IAAA,CAAK,CAAC;SAApB;IACH,CAAC;IACH;;;;;OAKG;IACH,0CAAG,GAAH,UAAG,QAAA;QAAH,iBAOG;QANC,IAAI,CAAC,UAAC,CAAU,IAAC,CAAI,QAAC,CAAQ,CAAC;QAC/B,MAAM,CAAC;YACL,KAAI,CAAC,UAAC,GAAY,KAAA,CAAK,UAAC,CAAU,MAAC,CAAM,UAAC,UAAY;gBACpD,MAAM,CAAC,QAAA,KAAa,UAAA,CAAW;YACjC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IASH,gCAAC;AAAD,CAnCA,AAmCC;;AARM,oCAAA,GAAoC;IAC3C,EAAE,IAAA,EAAM,UAAA,EAAW;CAClB,CAAC;AACF;;GAEG;AADF,wCAAA,GAAA,cAAA,OAAA,EAGA,EAHA,CAGA,CAAC;AAGF;IACA,gBANS;IAOT,yBANE,CAAA,UAAA,CAAA;IAOF;;;OAGG;IACH,yBANW,CAAA,cAA2B,CAAA;IAOtC,gBANc;IAOd,yBANc,CAAA,SAAA,CAAA,UAAA,CAAA;AAOd,CAAC;AAED;;;;GAIG;AACH,MAlBC,uDAmBG,gBAA2C;IAC7C,MAAM,CAxBC,gBAAA,IAAoB,IAAI,yBAAA,EAA0B,CAAE;AAyB7D,CAAC;AACD;;GAEG;AACH,MAnBC,CAAA,IAAA,oCAAA,GAAA;IAoBC,sFAAsF;IACtF,OAAO,EAAE,yBAAyB;IAClC,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,yBAAyB,CAAC,CAAC;IACnE,UAAU,EAAE,4CAA4C;CACzD,CAAC","file":"unique-selection-dispatcher.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}