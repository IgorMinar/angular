{"version":3,"sources":["../../../../../src/lib/core/overlay/overlay-container.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OADO,EAAA,UAAE,EAAW,QAAA,EAAU,QAAA,EAAS,MAAA,eAAA,CAAA;AAEvC;;;GAGG;AACH;IAAA;IAyDA,CAAC;IAlDD,sBAGG,wCAAA;QAPH;;;WAGG;aACH,cAG6B,MAAA,CAAO,IAAA,CAAK,WAAC,CAAW,CAAC,CAAA;QAFtD;;;WAGG;aACH,UADG,KAAA;YAEC,EAAE,CAAC,CAAC,IADC,CAAI,iBAAC,CAAiB,CAAC,CAAA;gBAE1B,IAAI,CADC,iBAAC,CAAiB,SAAC,CAAS,MAAC,CAAM,IAAC,CAAI,WAAC,CAAW,CAAC;gBAG1D,EAAE,CAAC,CAAC,KADC,CAAK,CAAC,CAAA;oBAET,IAAI,CADC,iBAAC,CAAiB,SAAC,CAAS,GAAC,CAAG,KAAC,CAAK,CAAC;gBAE9C,CAAC;YACH,CAAC;YAED,IAAI,CADC,WAAC,GAAa,KAAA,CAAM;QAE3B,CAAC;;;OAZmD;IAatD;;;;;OAKG;IACH,8CAAG,GAAH;QACI,EAAE,CAAC,CAAC,CAAC,IAAC,CAAI,iBAAC,CAAiB,CAAC,CAAA;YAAE,IAAA,CAAK,gBAAC,EAAgB,CAAE;QAAC,CAAA;QACxD,MAAM,CAAC,IAAA,CAAK,iBAAC,CAAiB;IAChC,CAAC;IACH;;;;OAIG;IACA,2CAAA,GAAH;QACI,IAAI,gBAAgB,CAAhB,SAAA,GAAY,QAAA,CAAS,aAAC,CAAa,KAAC,CAAK,CAAC;QAC9C,SAAS,CAAC,SAAC,CAAS,GAAC,CAAG,uBAAC,CAAuB,CAAC;QAEjD,EAAE,CAAC,CAAC,IAAC,CAAI,WAAC,CAAW,CAAC,CAAA;YACpB,SAAS,CAAC,SAAC,CAAS,GAAC,CAAG,IAAC,CAAI,WAAC,CAAW,CAAC;QAC5C,CAAC;QAED,QAAQ,CAAC,IAAC,CAAI,WAAC,CAAW,SAAC,CAAS,CAAC;QACrC,IAAI,CAAC,iBAAC,GAAmB,SAAA,CAAU;IACrC,CAAC;IASH,uBAAC;AAAD,CAzDA,AAyDC;;AARM,2BAAA,GAAoC;IAC3C,EAAE,IAAA,EAAM,UAAA,EAAW;CAClB,CAAC;AACF;;GAEG;AADF,+BAAA,GAAA,cAAA,OAAA,EAGA,EAHA,CAGA,CAAC;AAGF;IACA,gBANE;IAOF,gBAAgB,CAAC,UAAU,CAAC;IAC5B;;;OAGG;IACH,gBANc,CAAA,cAAgB,CAAA;IAO9B,gBANc;IAOd,gBANG,CAAA,SAAA,CAAA,iBAAA,CAAA;IAOH,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,WAAW,CAAC;AACvC,CAAC;AAED;;;;GAIG;AACH,MApBC,6CAAA,eAAA;IAqBC,MAAM,CA1BC,eAAA,IAAmB,IAAI,gBAAA,EAAiB,CAAE;AA2BnD,CAAC;AACD;;GAEG;AACH,MArBC,CAAA,IAAA,0BAAA,GAAA;IAsBC,6FAA6F;IAC7F,OAAO,EAAE,gBAAgB;IACzB,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,gBAAgB,CAAC,CAAC;IAC1D,UAAU,EAAE,kCAAkC;CAC/C,CAAC","file":"overlay-container.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      this._containerElement.classList.remove(this._themeClass);\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n/**\n * \\@docs-private\n */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}