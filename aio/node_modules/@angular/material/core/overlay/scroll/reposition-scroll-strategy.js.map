{"version":3,"sources":["../../../../../../src/lib/core/overlay/scroll/reposition-scroll-strategy.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAIH,OADO,EAAiB,uCAAA,EAAwC,MAAA,mBAAA,CAAA;AAWhE;;GAEG;AACH;IAGA;;;OAGG;IACH,kCAFY,iBAAmB,EACnB,OAAU;QADV,sBAAA,GAAA,iBAAA,CAAmB;QACnB,YAAA,GAAA,OAAA,CAAU;QALZ,wBAAA,GAAyC,IAAA,CAAK;IAKH,CAAA;IAIrD;;;OAGG;IACH,yCANG,GAMH,UANG,UAAA;QAOC,EAAE,CAAC,CAAC,IANC,CAAI,WAAC,CAAW,CAAC,CAAA;YAOpB,MANM,uCAAA,EAAwC,CAAE;QAOlD,CAAC;QAED,IAAI,CANC,WAAC,GAAa,UAAA,CAAW;IAOhC,CAAC;IACH;;OAEG;IACH,yCARG,GAQH;QAAA,iBAQG;QAPC,EAAE,CAAC,CAAC,CARC,IAAC,CAAI,mBAAC,CAAmB,CAAC,CAAA;YAS7B,IAAI,gBAAgB,CARhB,QAAA,GAAW,IAAA,CAAK,OAAC,GAAS,IAAA,CAAK,OAAC,CAAO,cAAC,GAAgB,CAAA,CAAE;YAU9D,IAAI,CARC,mBAAC,GAAqB,IAAA,CAAK,iBAAC,CAAiB,QAAC,CAAQ,QAAC,EAAS;gBASnE,KAAI,CARC,WAAC,CAAW,cAAC,EAAc,CAAE;YASpC,CAAC,CARC,CAAC;QASL,CAAC;IACH,CAAC;IACH;;OAEG;IACH,0CAVG,GAUH;QACI,EAAE,CAAC,CAAC,IAVC,CAAI,mBAAC,CAAmB,CAAC,CAAA;YAW5B,IAAI,CAVC,mBAAC,CAAmB,WAAC,EAAW,CAAE;YAWvC,IAAI,CAVC,mBAAC,GAAqB,IAAA,CAAK;QAWlC,CAAC;IACH,CAAC;IACH,+BAAC;AAAD,CA1CA,AA0CC,IAAA;;AAED;IACA,gBAAgB;IAChB,wBAAwB,CAAC,SAAS,CAAC,mBAAmB,CAAC;IACvD,gBAAgB;IAChB,wBAAwB,CAAC,SAAS,CAAC,WAAW,CAAC;IAC/C,gBAAgB;IAChB,wBAAwB,CAAC,SAAS,CAAC,iBAAiB,CAAC;IACrD,gBAAgB;IAChB,wBAAwB,CAAC,SAAS,CAAC,OAAO,CAAC;AAC3C,CAAC","file":"reposition-scroll-strategy.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  scrollThrottle?: number;\n}\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n * @param {?=} _config\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _config?: RepositionScrollStrategyConfig) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      let /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction RepositionScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nRepositionScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollDispatcher;\n/** @type {?} */\nRepositionScrollStrategy.prototype._config;\n}\n\n"]}