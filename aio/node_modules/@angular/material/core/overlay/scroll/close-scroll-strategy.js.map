{"version":3,"sources":["../../../../../../src/lib/core/overlay/scroll/close-scroll-strategy.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OADO,EAAiB,uCAAA,EAAwC,MAAA,mBAAA,CAAA;AAKhE;;GAEG;AACH;IAGA;;OAEG;IACH,6BADsB,iBAAmB;QAAnB,sBAAA,GAAA,iBAAA,CAAmB;QAH/B,wBAAA,GAAyC,IAAA,CAAK;IAGE,CAAA;IAE1D;;;OAGG;IACH,oCAJG,GAIH,UAJG,UAAA;QAKC,EAAE,CAAC,CAAC,IAJC,CAAI,WAAC,CAAW,CAAC,CAAA;YAKpB,MAJM,uCAAA,EAAwC,CAAE;QAKlD,CAAC;QAED,IAAI,CAJC,WAAC,GAAa,UAAA,CAAW;IAKhC,CAAC;IACH;;OAEG;IACH,oCANG,GAMH;QAAA,iBAUG;QATC,EAAE,CAAC,CAAC,CANC,IAAC,CAAI,mBAAC,CAAmB,CAAC,CAAA;YAO7B,IAAI,CANC,mBAAC,GAAqB,IAAA,CAAK,iBAAC,CAAiB,QAAC,CAAQ,CAAC,EAAE;gBAO5D,EAAE,CAAC,CAAC,KANC,CAAI,WAAC,CAAW,WAAC,EAAW,CAAE,CAAC,CAAA;oBAOlC,KAAI,CANC,WAAC,CAAW,MAAC,EAAM,CAAE;gBAO5B,CAAC;gBAED,KAAI,CANC,OAAC,EAAO,CAAE;YAOjB,CAAC,CANC,CAAC;QAOL,CAAC;IACH,CAAC;IACH;;OAEG;IACH,qCARG,GAQH;QACI,EAAE,CAAC,CAAC,IARC,CAAI,mBAAC,CAAmB,CAAC,CAAA;YAS5B,IAAI,CARC,mBAAC,CAAmB,WAAC,EAAW,CAAE;YASvC,IAAI,CARC,mBAAC,GAAqB,IAAA,CAAK;QASlC,CAAC;IACH,CAAC;IACH,0BAAC;AAAD,CAzCA,AAyCC,IAAA;;AAED;IACA,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,mBAAmB,CAAC;IAClD,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC;IAC1C,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,iBAAiB,CAAC;AAChD,CAAC","file":"close-scroll-strategy.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(0, () => {\n        if (this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this.disable();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction CloseScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nCloseScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollDispatcher;\n}\n\n"]}