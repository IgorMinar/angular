{"version":3,"sources":["../../../../../../src/lib/core/overlay/scroll/scroll-strategy-options.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OADO,EAAA,UAAE,EAAU,MAAA,eAAA,CAAA;AAEnB,OADO,EAAA,mBAAE,EAAmB,MAAA,yBAAA,CAAA;AAE5B,OADO,EAAA,kBAAE,EAAkB,MAAA,wBAAA,CAAA;AAE3B,OADO,EAAA,mBAAE,EAAmB,MAAA,yBAAA,CAAA;AAE5B,OADO,EAAA,gBAAE,EAAgB,MAAA,qBAAA,CAAA;AAEzB,OADO,EAAA,aAAE,EAAa,MAAA,4BAAA,CAAA;AAEtB,OADO,EAEL,wBAAwB,GAEzB,MAAM,8BAA8B,CAAC;AACtC;;;;;GAKG;AACH;IACA;;;OAGG;IACH,+BADY,iBAAmB,EACnB,cAAgB;QAA5B,iBAA0C;QAD9B,sBAAA,GAAA,iBAAA,CAAmB;QACnB,mBAAA,GAAA,cAAA,CAAgB;QAG5B;;WAEG;QACH,SAHG,GAAA,cAAA,OAAA,IAAA,kBAAA,EAAA,EAAA,CAAA,CAAA;QAIH;;WAEG;QACH,UAJG,GAAA,cAAA,OAAA,IAAA,mBAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,CAAA;QAKH;;WAEG;QACH,UALG,GAAA,cAAA,OAAA,IAAA,mBAAA,CAAA,KAAA,CAAA,cAAA,CAAA,EAAA,CAAA,CAAA;QAMH;;;;WAIG;QACH,eAJG,GAAA,UAAA,MAAA;YAKG,OAAA,IAAI,wBAAwB,CAAC,KAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC;QAA5D,CAA4D,CAAA;IArBxB,CAAA;IAgC1C,4BAAC;AAAD,CArCA,AAqCC;;AAdM,gCAAA,GAAoC;IAK3C,EAJE,IAAA,EAAM,UAAA,EAAW;CAKlB,CAJC;AAKF;;GAEG;AALF,oCAAA,GAAA,cAAA,OAAA;IAOD,EAAC,IAAI,EAAE,gBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAE,aAAa,GAAG;CACtB,EATA,CASA,CAAC;AAGF;IACA,gBAAgB;IAChB,qBAAqB,CAAC,UAAU,CAAC;IACjC;;;OAGG;IACH,qBAAqB,CAAC,cAAc,CAAC;IACrC;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC;IACrC;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC;IACtC;;;OAGG;IACH,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC;IACtC;;;;;OAKG;IACH,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;IAC3C,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAClD,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,cAAc,CAAC;AAC/C,CAAC","file":"scroll-strategy-options.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {CloseScrollStrategy} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {ViewportRuler} from '../position/viewport-ruler';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n/**\n * Options for how an overlay will handle scrolling.\n * \n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nexport class ScrollStrategyOptions {\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewportRuler: ViewportRuler) { }\n/**\n * Do nothing on scroll.\n */\nnoop = () => new NoopScrollStrategy();\n/**\n * Close the overlay as soon as the user scrolls.\n */\nclose = () => new CloseScrollStrategy(this._scrollDispatcher);\n/**\n * Block scrolling.\n */\nblock = () => new BlockScrollStrategy(this._viewportRuler);\n/**\n * Update the overlay's position on scroll.\n * @param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n */\nreposition = (config?: RepositionScrollStrategyConfig) =>\n      new RepositionScrollStrategy(this._scrollDispatcher, config)\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n{type: ViewportRuler, },\n];\n}\n\nfunction ScrollStrategyOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollStrategyOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollStrategyOptions.ctorParameters;\n/**\n * Do nothing on scroll.\n * @type {?}\n */\nScrollStrategyOptions.prototype.noop;\n/**\n * Close the overlay as soon as the user scrolls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.close;\n/**\n * Block scrolling.\n * @type {?}\n */\nScrollStrategyOptions.prototype.block;\n/**\n * Update the overlay's position on scroll.\n * \\@param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.reposition;\n/** @type {?} */\nScrollStrategyOptions.prototype._scrollDispatcher;\n/** @type {?} */\nScrollStrategyOptions.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}