{"version":3,"sources":["../../../../../../src/lib/core/overlay/scroll/scroll-dispatcher.ts"],"names":[],"mappings":"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","file":"scroll-dispatcher.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, Injectable, NgZone, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '../../platform/index';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {auditTime} from '../../rxjs/index';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription | null = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollableReference = this.scrollableReferences.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\n    if (!this._platform.isBrowser) {\n      return Subscription.EMPTY;\n    }\n\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      auditTime.call(this._scrolled.asObservable(), auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return merge(\n          fromEvent(window.document, 'scroll'),\n          fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((_subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n\n    return false;\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n/** @type {?} */\nScrollDispatcher.prototype._platform;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private\n */\nexport const SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}