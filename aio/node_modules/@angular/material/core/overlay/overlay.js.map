{"version":3,"sources":["../../../../../src/lib/core/overlay/overlay.ts"],"names":[],"mappings":"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","file":"overlay.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {OverlayContainer} from './overlay-container';\nimport {ScrollStrategyOptions} from './scroll/index';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nlet defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} scrollStrategies\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(public scrollStrategies: ScrollStrategyOptions,\nprivate _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) { }\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    const /** @type {?} */ pane = this._createPaneElement();\n    const /** @type {?} */ portalHost = this._createPortalHost(pane);\n    return new OverlayRef(portalHost, pane, state, this._ngZone);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollStrategyOptions, },\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype.scrollStrategies;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}