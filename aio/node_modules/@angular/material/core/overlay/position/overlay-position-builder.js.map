{"version":3,"sources":["../../../../../../src/lib/core/overlay/position/overlay-position-builder.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OADO,EAAA,aAAE,EAAa,MAAA,kBAAA,CAAA;AAEtB,OADO,EAAA,yBAAE,EAAyB,MAAA,+BAAA,CAAA;AAElC,OADO,EAAa,UAAA,EAAW,MAAA,eAAA,CAAA;AAE/B,OADO,EAAA,sBAAE,EAAsB,MAAA,4BAAA,CAAA;AAG/B;;GAEG;AACH;IACA;;OAEG;IACH,gCAFsB,cAAgB;QAAhB,mBAAA,GAAA,cAAA,CAAgB;IAAc,CAAA;IAGpD;;;OAGG;IACH,uCAFG,GAEH;QACI,MAAM,CAFC,IAAI,sBAAA,EAAuB,CAAE;IAGtC,CAAC;IACH;;;;;;OAMG;IACH,4CAFG,GAEH,UACM,UAAsB,EACtB,SAAmC,EACnC,UAAqC;QACvC,MAAM,CAFC,IAAI,yBAAA,CAA0B,UAAC,EAAW,SAAA,EAAW,UAAA,EAAY,IAAA,CAAK,cAAC,CAAc,CAAC;IAG/F,CAAC;IAUH,6BAAC;AAAD,CAlCA,AAkCC;;AAXM,iCAAA,GAAoC;IAG3C,EAFE,IAAA,EAAM,UAAA,EAAW;CAGlB,CAFC;AAGF;;GALE;AAID,qCAAA,GAAA,cAAA,OAAA;IAKD,EAAC,IAAI,EAAE,aAAa,GAAG;CACtB,EANA,CAMA,CAAC;AAGF;IACA,gBAAgB;IAChB,sBAAsB,CAAC,UAAU,CAAC;IAClC;;;OAGG;IACH,sBAAsB,CAAC,cAAc,CAAC;IACtC,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,cAAc,CAAC;AAChD,CAAC","file":"overlay-position-builder.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewportRuler} from './viewport-ruler';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {ElementRef, Injectable} from '@angular/core';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}