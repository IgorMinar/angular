{"version":3,"sources":["../../../../../src/lib/core/overlay/overlay-ref.ts"],"names":[],"mappings":"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","file":"overlay-ref.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement | null = null;\nprivate _backdropClick: Subject<any> = new Subject();\nprivate _attachments = new Subject<void>();\nprivate _detachments = new Subject<void>();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _ngZone: NgZone) {\n\n    _state.scrollStrategy.attach(this);\n  }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n    this._state.scrollStrategy.enable();\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._state.panelClass) {\n      this._pane.classList.add(this._state.panelClass);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n    this._state.scrollStrategy.disable();\n\n    let /** @type {?} */ detachmentResult = this._portalHost.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    return detachmentResult;\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    this._state.scrollStrategy.disable();\n    this.detachBackdrop();\n    this._portalHost.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._detachments.next();\n    this._detachments.complete();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been attached.\n * @return {?}\n */\nattachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been detached.\n * @return {?}\n */\ndetachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', /** @type {?} */(( this._state.direction)));\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._state.backdropClass) {\n      this._backdropElement.classList.add(this._state.backdropClass);\n    } /** @type {?} */((\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement)).insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) { /** @type {?} */((\n      this._pane.parentNode)).appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._state.backdropClass) {\n        backdropToDetach.classList.remove(this._state.backdropClass);\n      }\n\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._attachments;\n/** @type {?} */\nOverlayRef.prototype._detachments;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n"]}