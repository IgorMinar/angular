{"version":3,"sources":["../../../../../src/lib/core/common-behaviors/color.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAmBH;;;;;;GAMG;AACH,MANC,qBAAA,IAAA,EAAA,YAAA;IAQC,MAAM;QANe,mCAAA;QA8BvB;;WAEG;QACH;YAdK,cAAwB;iBAAxB,UAAwB,EAAxB,qBAAwB,EAAxB,IAAwB;gBAAxB,yBAAwB;;YAc7B,+BACe,IAAI,UAId;YAFC,8DAA8D;YAC9D,KAAI,CAAC,KAAK,GAAG,YAAY,CAAC;;QAC5B,CAAC;QA3BL,sBARK,0BAAA;YAKL;;eAEG;iBACH,cARgC,MAAA,CAAO,IAAA,CAAK,MAAC,CAAM,CAAC,CAAA;YASpD;;;eAGG;iBACH,UAZK,KAAA;gBAaC,IAAM,gBAAgB,CAZhB,YAAA,GAAe,KAAA,IAAS,YAAA,CAAa;gBAc3C,EAAE,CAAC,CAAC,YAZC,KAAgB,IAAA,CAAK,MAAC,CAAM,CAAC,CAAA;oBAahC,EAAE,CAAC,CAAC,IAZC,CAAI,MAAC,CAAM,CAAC,CAAA;wBAaf,IAAI,CAZC,SAAC,CAAS,WAAC,CAAW,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,SAAA,IAAQ,CAAI,MAAO,CAAE,CAAC;oBAanF,CAAC;oBACD,EAAE,CAAC,CAAC,YAZC,CAAY,CAAC,CAAA;wBAahB,IAAI,CAZC,SAAC,CAAS,QAAC,CAAQ,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,SAAA,YAAoB,CAAE,CAAC;oBAajF,CAAC;oBAED,IAAI,CAZC,MAAC,GAAQ,YAAA,CAAa;gBAa7B,CAAC;YACH,CAAC;;;WA1B+C;QAoClD,cAAC;IAAD,CAvCO,AAuCN,CAvCoB,IAAA,GAyBnB;AAeJ,CAAC","file":"color.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n"]}