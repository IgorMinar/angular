{"version":3,"sources":["../../../../../src/lib/core/gestures/gesture-config.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAGH,OADO,EAAA,UAAE,EAAW,SAAA,EAAU,MAAA,eAAA,CAAA;AAE9B,OADO,EAAA,mBAAE,EAAmB,MAAA,2BAAA,CAAA;AAG5B;IAEC,yCAAA;IAUD;QAAA,YACI,iBAAO,SAQR;QAlBO,aAAA,GAAwB,OAAO,MAAA,KAAW,WAAA,GAAc,CAAA,CAAA,MAAW,CAAA,CAAI,CAAC,MAAC,GAAQ,IAAA,CAAK;QAA9F,gEAAgE;QAChE,YAAM,GAEa,KAAA,CAAK,OAAC,GAAS;YADhC,WAAW;YACX,OAAO;YACP,YAAY;YACZ,UAAU;YACV,YAAY;YACZ,WAAW;SACZ,GAEG,EAAA,CAAG;QAEL,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,IAAI,SAAS,EAAE,CAAC,CAAC,CAAC;YACjC,OAAO,CAAC,IAAI,CACV,oDAAoD;gBACpD,oCAAoC,CACrC,CAAC;QACJ,CAAC;;IACH,CAAC;IACH;;;;;;;;;;;;OAYG;IACH,mCAIG,GAJH,UAIG,OAAA;QAHC,IAAM,gBAAgB,CAIhB,EAAA,GAAK,IAAI,IAAA,CAAK,OAAC,CAAO,OAAC,CAAO,CAAC;QAFrC,8BAA8B;QAC9B,IAAI,gBAAgB,CAIhB,GAAA,GAAM,IAAI,IAAA,CAAK,OAAC,CAAO,GAAC,EAAG,CAAE;QAHjC,IAAI,gBAAgB,CAIhB,KAAA,GAAQ,IAAI,IAAA,CAAK,OAAC,CAAO,KAAC,EAAK,CAAE;QAHrC,IAAI,gBAAgB,CAIhB,KAAA,GAAQ,IAAI,IAAA,CAAK,OAAC,CAAO,KAAC,EAAK,CAAE;QAFrC,kFAAkF;QAClF,0DAA0D;QAC1D,+DAA+D;QAC/D,IAAI,gBAAgB,CAIhB,KAAA,GAAQ,IAAA,CAAK,iBAAC,CAAiB,GAAC,EAAI,EAAA,KAAE,EAAM,OAAA,EAAS,SAAA,EAAW,CAAA,EAAE,EAAE,KAAA,CAAM,CAAC;QAH/E,IAAI,gBAAgB,CAIhB,SAAA,GAAY,IAAA,CAAK,iBAAC,CAAiB,KAAC,EAAM,EAAA,KAAE,EAAM,WAAA,EAAa,IAAA,EAAM,GAAA,EAAI,CAAC,CAAC;QAF/E,4DAA4D;QAC5D,GAAG,CAIC,aAAC,CAAa,KAAC,CAAK,CAAC;QAFzB,4CAA4C;QAC5C,EAAE,CAIC,GAAC,CAAG,CAAC,KAAC,EAAM,KAAA,EAAO,GAAA,EAAK,KAAA,EAAO,SAAA,CAAU,CAAC,CAAC;QAF9C,MAAM,CAAiB,CAIhB,EAAM,CAAA,CAAe;IAH9B,CAAC;IACH;;;;;;OAMG;IAAA,yCAAA,GACH,UADG,IAAA,EAAA,OAAA;QAAA,sBAAA;aAAA,UAAA,EAAA,qBAAA,EAAA,IAAA;YAAA,qCAAA;;QAEC,IAAI,gBAAgB,CADhB,UAAA,GAAa,IAAI,CAAA,CAAA,IAAE,CAAI,WAAe,CAAA,CAAiB,CAAC,OAAC,CAAO,CAAC;QAGrE,YAAY,CADC,IAAC,CAAI,IAAC,CAAI,CAAC;QAExB,YAAY,CADC,OAAC,CAAO,UAAA,IAAC,IAAO,OAAA,UAAA,CAAW,aAAC,CAAa,IAAC,CAAI,EAA9B,CAA8B,CAAC,CAAC;QAG7D,MAAM,CADC,UAAA,CAAW;IAEpB,CAAC;IAUH,oBAAC;AAAD,CAjFA,AAiFC,CA/EA,mBAAA;;AAsEM,wBAAA,GAAoC;IAE3C,EADE,IAAA,EAAM,UAAA,EAAW;CAElB,CADC;AAEF;;GAJE;AAID,4BAAA,GAAA,cAAA,OAAA,EAIA,EAJA,CAIA,CAAC;AAGF;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC;IAChC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC;AAC/B,CAAC","file":"gesture-config.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}