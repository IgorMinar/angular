{"version":3,"sources":["../../../../src/lib/checkbox/checkbox.ts"],"names":[],"mappings":"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","file":"checkbox.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin, FocusOriginMonitor, MdRipple, RippleRef} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n\n// Increasing integer for generating unique ids for checkbox components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdCheckboxMixinBase =\n  mixinColor(mixinDisableRipple(mixinDisabled(MdCheckboxBase)), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase implements ControlValueAccessor, AfterViewInit,\n    OnDestroy, CanColor, CanDisable, CanDisableRipple {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\nprivate _uniqueId: string = `md-checkbox-${++nextUniqueId}`;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/** @type {?} */\nMdCheckbox.prototype._uniqueId;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}