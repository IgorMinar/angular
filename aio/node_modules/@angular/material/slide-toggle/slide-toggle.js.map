{"version":3,"sources":["../../../../src/lib/slide-toggle/slide-toggle.ts"],"names":[],"mappings":"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","file":"slide-toggle.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  applyCssTransform,\n  coerceBooleanProperty,\n  FocusOrigin,\n  FocusOriginMonitor,\n  HammerInput,\n  MdRipple,\n  RippleRef,\n  Platform,\n} from '../core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextUniqueId = 0;\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\n/**\n * Change event object emitted by a MdSlideToggle.\n */\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMdSlideToggleBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSlideToggleMixinBase =\n  mixinColor(mixinDisableRipple(mixinDisabled(MdSlideToggleBase)), 'accent');\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, CanDisableRipple {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId: string = `md-slide-toggle-${++nextUniqueId}`;\nprivate _slideRenderer: SlideToggleRenderer;\nprivate _required: boolean = false;\nprivate _checked: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string | null = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string | null = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the slide-toggle element is checked or not\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    this._checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * This function will called if the underlying input changed its value through user interaction.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Sync the value from the underlying input element with the slide-toggle component.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event if the native input emitted one.\n    // It is important to only emit it, if the native input triggered one, because we don't want\n    // to trigger a change event, when the `checked` variable changes programmatically.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // In some situations the user will release the mouse on the label element. The label element\n    // redirects the click to the underlying input element and will result in a value change.\n    // Prevent the default behavior if dragging, because the value will be set after drag.\n    if (this._slideRenderer.dragging) {\n      event.preventDefault();\n    }\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = !!value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n    this.onChange(this.checked);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'checked': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.tabIndex;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._platform;\n/** @type {?} */\nMdSlideToggle.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} _elementRef\n * @param {?} platform\n */\nconstructor(private _elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n/** @type {?} */\nSlideToggleRenderer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}