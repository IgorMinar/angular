{"version":3,"sources":["../../../../src/lib/select/select.ts"],"names":[],"mappings":"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","file":"select.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  ViewChild,\n  ChangeDetectorRef,\n  Attribute,\n  OnInit,\n  Inject,\n  ChangeDetectionStrategy,\n  InjectionToken,\n} from '@angular/core';\nimport {NgForm, FormGroupDirective} from '@angular/forms';\nimport {MdOption, MdOptionSelectionChange, MdOptgroup} from '../core/option/index';\nimport {ENTER, SPACE, UP_ARROW, DOWN_ARROW, HOME, END} from '../core/keyboard/keycodes';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {Directionality} from '../core/bidi/index';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformPlaceholder, transformPanel, fadeInContent} from './select-animations';\nimport {ControlValueAccessor, NgControl} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ConnectedOverlayDirective} from '../core/overlay/overlay-directives';\nimport {ViewportRuler} from '../core/overlay/position/viewport-ruler';\nimport {SelectionModel} from '../core/selection/selection';\nimport {Overlay} from '../core/overlay/overlay';\nimport {getMdSelectDynamicMultipleError, getMdSelectNonArrayValueError} from './select-errors';\nimport {startWith, filter} from '../core/rxjs/index';\nimport {merge} from 'rxjs/observable/merge';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from '../core/placeholder/placeholder-options';\n// This import is only used to define a generic type. The current TypeScript version incorrectly\n// considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n// tslint:disable-next-line:no-unused-variable\n\nimport {ScrollStrategy, RepositionScrollStrategy} from '../core/overlay/scroll';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nexport const SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED =\n    Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Default minimum width of the trigger based on the CSS.\n * Used as a fallback for server-side rendering.\n * \\@docs-private\n */\nconst SELECT_TRIGGER_MIN_WIDTH = 112;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nexport const MD_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSelectMixinBase = mixinColor(mixinDisabled(MdSelectBase), 'primary');\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanColor, CanDisable {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription: Subscription | null;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription: Subscription;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Tab index for the element.\n */\nprivate _tabIndex: number;\n/**\n * Deals with configuring placeholder options\n */\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n */\n_scrollStrategy = this._scrollStrategyFactory();\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): FloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n/**\n * Value of the select control.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\nprivate _value: any;\n/**\n * Whether ripples for all options in the select are disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setOptionDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _overlay\n * @param {?} _platform\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} _control\n * @param {?} tabIndex\n * @param {?} placeholderOptions\n * @param {?} _scrollStrategyFactory\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _overlay: Overlay,\nprivate _platform: Platform,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic _control: NgControl,\n     tabIndex: string,\n      placeholderOptions: PlaceholderOptions,\nprivate _scrollStrategyFactory) {\n\n    super(renderer, elementRef);\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, undefined, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\n      this._resetOptions();\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._setSelectionByValue(this._control ? this._control.value : this._value);\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (this._multiple) {\n      let /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._platform.isBrowser ? this._getTriggerRect().width :\n        SELECT_TRIGGER_MIN_WIDTH;\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Whether the select has a value.\n * @return {?}\n */\n_hasValue(): boolean {\n    return this._selectionModel && this._selectionModel.hasValue();\n  }\n/**\n * Whether the select is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ isInvalid = this._control && this._control.invalid;\n    const /** @type {?} */ isTouched = this._control && this._control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\n    scrollContainer)).scrollTop = this._scrollTop;\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._selectValue(value, isUserInput);\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption | undefined {\n    let /** @type {?} */ optionsArray = this.options.toArray();\n    let /** @type {?} */ correspondingOption = optionsArray.find(option => {\n      return option.value != null && option.value === value;\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this._keyManager.setActiveItem(optionsArray.indexOf(correspondingOption));\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager(this.options);\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n    this._setOptionDisableRipple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\n      event => event.isUserInput).subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Sets the `disableRipple` property on each option.\n * @return {?}\n */\nprivate _setOptionDisableRipple() {\n    if (this.options) {\n      this.options.forEach(option => option.disableRipple = this.disableRipple);\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth = this._triggerWidth - 13;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\n    }\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number | undefined {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._hasValue()) {\n      let /** @type {?} */ selectedOptionOffset = /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\n\n      selectedOptionOffset += this._getLabelCountBeforeOption(selectedOptionOffset);\n\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1 -\n          (this._getLabelCountBeforeOption(0) * SELECT_ITEM_HEIGHT);\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ? '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n/**\n * Calculates the amount of option group labels that precede the specified option.\n * Useful when positioning the panel, because the labels will offset the index of the\n * currently-selected option.\n * @param {?} optionIndex\n * @return {?}\n */\nprivate _getLabelCountBeforeOption(optionIndex: number): number {\n    if (this.optionGroups.length) {\n      let /** @type {?} */ options = this.options.toArray();\n      let /** @type {?} */ groups = this.optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (options[i].group && options[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['color', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_isErrorState()',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': '_isErrorState()',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Overlay, },\n{type: Platform, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_SELECT_SCROLL_STRATEGY, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'value': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * Deals with configuring placeholder options\n * @type {?}\n */\nMdSelect.prototype._placeholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n * @type {?}\n */\nMdSelect.prototype._scrollStrategy;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/** @type {?} */\nMdSelect.prototype._value;\n/** @type {?} */\nMdSelect.prototype._disableRipple;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMdSelect.prototype.valueChange;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._overlay;\n/** @type {?} */\nMdSelect.prototype._platform;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._parentForm;\n/** @type {?} */\nMdSelect.prototype._parentFormGroup;\n/** @type {?} */\nMdSelect.prototype._control;\n/** @type {?} */\nMdSelect.prototype._scrollStrategyFactory;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}