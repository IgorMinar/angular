{"version":3,"sources":["../../../../src/lib/slider/slider.ts"],"names":[],"mappings":"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","file":"slider.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty, HammerInput} from '../core';\nimport {Directionality} from '../core/bidi/index';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSliderBase { }\nexport const /** @type {?} */ _MdSliderMixinBase = mixinDisabled(MdSliderBase);\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() { return this._max; }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() { return this._min; }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n */\nprivate _renderer: SliderRenderer;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * The last value for which a change event was emitted.\n */\nprivate _lastChangeValue: number | null;\n/**\n * The last value for which an input event was emitted.\n */\nprivate _lastInputValue: number | null;\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super();\n    this._focusOriginMonitor\n        .monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n    this._renderer = new SliderRenderer(this._elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    this._isSliding = false;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emits a change and input event if the value changed. */\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    this._emitInputEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput | null) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._renderer.addFocus();\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n    this._emitValueIfChanged();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitValueIfChanged() {\n    if (this.value != this._lastChangeValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastChangeValue = this.value;\n      this._controlValueAccessorChangeFn(this.value);\n      this.change.emit(event);\n    }\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    if (this.value != this._lastInputValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastInputValue = this.value;\n      this.input.emit(event);\n    }\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._renderer;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * The last value for which a change event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastChangeValue;\n/**\n * The last value for which an input event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastInputValue;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._changeDetectorRef;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nexport class SliderRenderer {\nprivate _sliderElement: HTMLElement;\n/**\n * @param {?} elementRef\n */\nconstructor(elementRef: ElementRef) {\n    this._sliderElement = elementRef.nativeElement;\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\ngetSliderDimensions() {\n    let /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n    return wrapperElement ? wrapperElement.getBoundingClientRect() : null;\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\naddFocus() {\n    this._sliderElement.focus();\n  }\n}\n\nfunction SliderRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderRenderer.prototype._sliderElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}