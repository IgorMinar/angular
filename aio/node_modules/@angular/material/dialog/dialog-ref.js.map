{"version":3,"sources":["../../../../src/lib/dialog/dialog-ref.ts"],"names":[],"mappings":"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","file":"dialog-ref.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '../core';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\nimport {RxChain, first, filter} from '../core/rxjs/index';\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n */\nconstructor(private _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer) {\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\n      .call(first)\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null!;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    RxChain.from(this._containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'start')\n      .call(first)\n      .subscribe(() => this._overlayRef.detachBackdrop());\n\n    this._containerInstance._startExitAnimation();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\n    return this._containerInstance._isAnimating;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n}\n\n"]}