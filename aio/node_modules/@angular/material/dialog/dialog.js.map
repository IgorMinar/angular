{"version":3,"sources":["../../../../src/lib/dialog/dialog.ts"],"names":[],"mappings":"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","file":"dialog.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Injector,\n  ComponentRef,\n  Injectable,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  Overlay,\n  OverlayRef,\n  ComponentType,\n  OverlayState,\n  ComponentPortal,\n  BlockScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '../core';\nimport {PortalInjector} from '../core/portal/portal-injector';\nimport {extendObject} from '../core/util/object-extend';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\nimport {TemplatePortal} from '../core/portal/portal';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MD_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n */\nexport const MD_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget _openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Subject for notifying the user that a dialog has opened.\n * @return {?}\n */\nget _afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * Subject for notifying the user that all open dialogs have finished closing.\n * @return {?}\n */\nget _afterAllClosed(): Subject<void> {\n    return this._parentDialog ?\n      this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Gets an observable that is notified when a dialog has been opened.\n */\nafterOpen: Observable<MdDialogRef<any>> = this._afterOpen.asObservable();\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n */\nafterAllClosed: Observable<void> = this._afterAllClosed.asObservable();\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _scrollStrategy\n * @param {?} _location\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _scrollStrategy,\nprivate _location: Location,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && _location) {\n      _location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n\n    const /** @type {?} */ inProgressDialog = this._openDialogs.find(dialog => dialog._isAnimating());\n\n    // If there's a dialog that is in the process of being opened, return it instead.\n    if (inProgressDialog) {\n      return inProgressDialog;\n    }\n\n    config = _applyConfigDefaults(config);\n\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this._openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this._openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this._afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this._openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this._openDialogs[i].close();\n    }\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    let /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    let /** @type {?} */ overlayState = new OverlayState();\n    overlayState.panelClass = dialogConfig.panelClass;\n    overlayState.hasBackdrop = dialogConfig.hasBackdrop;\n    overlayState.scrollStrategy = this._scrollStrategy();\n    overlayState.direction = dialogConfig.direction;\n    if (dialogConfig.backdropClass) {\n      overlayState.backdropClass = dialogConfig.backdropClass;\n    }\n    overlayState.positionStrategy = this._overlay.position().global();\n\n    return overlayState;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    let /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */(( null))));\n    } else {\n      let /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      let /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n * of a dialog to close itself and, optionally, to return a value.\n * @template T\n * @param {?} config Config object that is used to construct the dialog.\n * @param {?} dialogRef Reference to the dialog.\n * @param {?} dialogContainer\n * @return {?} The custom injector that can be used inside the dialog.\n */\nprivate _createInjector<T>(\n      config: MdDialogConfig,\n      dialogRef: MdDialogRef<T>,\n      dialogContainer: MdDialogContainer): PortalInjector {\n\n    let /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    let /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdDialogRef, dialogRef);\n    injectionTokens.set(MdDialogContainer, dialogContainer);\n    injectionTokens.set(MD_DIALOG_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    let /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this._openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this._openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    let /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n    let /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Gets an observable that is notified when a dialog has been opened.\n * @type {?}\n */\nMdDialog.prototype.afterOpen;\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._scrollStrategy;\n/** @type {?} */\nMdDialog.prototype._location;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}