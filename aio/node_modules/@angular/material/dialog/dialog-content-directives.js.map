{"version":3,"sources":["../../../../src/lib/dialog/dialog-content-directives.ts"],"names":[],"mappings":"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","file":"dialog-content-directives.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, Optional, OnInit} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n/**\n * Dialog close input for compatibility mode.\n * @param {?} value\n * @return {?}\n */\nset _matDialogClose(value: any) { this.dialogResult = value; }\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-dialog-close], button[mat-dialog-close],' +\n            'button[mdDialogClose], button[matDialogClose]',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle implements OnInit {\n   id = `md-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MdDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n/** @type {?} */\nMdDialogTitle.propDecorators;\n/** @type {?} */\nMdDialogTitle.prototype.id;\n/** @type {?} */\nMdDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,' +\n            '[mdDialogContent], [matDialogContent]',\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,' +\n            '[mdDialogActions], [matDialogActions]',\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}