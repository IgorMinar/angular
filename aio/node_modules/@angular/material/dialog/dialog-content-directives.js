/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directive, Input, Optional } from '@angular/core';
import { MdDialogRef } from './dialog-ref';
import { MdDialogContainer } from './dialog-container';
/**
 * Counter used to generate unique IDs for dialog elements.
 */
var dialogElementUid = 0;
/**
 * Button that will close the current dialog.
 */
var MdDialogClose = (function () {
    /**
     * @param {?} dialogRef
     */
    function MdDialogClose(dialogRef) {
        this.dialogRef = dialogRef;
        /**
         * Screenreader label for the button.
         */
        this.ariaLabel = 'Close dialog';
    }
    Object.defineProperty(MdDialogClose.prototype, "_matDialogClose", {
        /**
         * Dialog close input for compatibility mode.
         * @param {?} value
         * @return {?}
         */
        set: function (value) { this.dialogResult = value; },
        enumerable: true,
        configurable: true
    });
    return MdDialogClose;
}());
export { MdDialogClose };
MdDialogClose.decorators = [
    { type: Directive, args: [{
                selector: 'button[md-dialog-close], button[mat-dialog-close],' +
                    'button[mdDialogClose], button[matDialogClose]',
                host: {
                    '(click)': 'dialogRef.close(dialogResult)',
                    '[attr.aria-label]': 'ariaLabel',
                    'type': 'button',
                }
            },] },
];
/**
 * @nocollapse
 */
MdDialogClose.ctorParameters = function () { return [
    { type: MdDialogRef, },
]; };
MdDialogClose.propDecorators = {
    'ariaLabel': [{ type: Input, args: ['aria-label',] },],
    'dialogResult': [{ type: Input, args: ['md-dialog-close',] },],
    '_matDialogClose': [{ type: Input, args: ['mat-dialog-close',] },],
};
function MdDialogClose_tsickle_Closure_declarations() {
    /** @type {?} */
    MdDialogClose.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdDialogClose.ctorParameters;
    /** @type {?} */
    MdDialogClose.propDecorators;
    /**
     * Screenreader label for the button.
     * @type {?}
     */
    MdDialogClose.prototype.ariaLabel;
    /**
     * Dialog close input.
     * @type {?}
     */
    MdDialogClose.prototype.dialogResult;
    /** @type {?} */
    MdDialogClose.prototype.dialogRef;
}
/**
 * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.
 */
var MdDialogTitle = (function () {
    /**
     * @param {?} _container
     */
    function MdDialogTitle(_container) {
        this._container = _container;
        this.id = "md-dialog-title-" + dialogElementUid++;
    }
    /**
     * @return {?}
     */
    MdDialogTitle.prototype.ngOnInit = function () {
        var _this = this;
        if (this._container && !this._container._ariaLabelledBy) {
            Promise.resolve().then(function () { return _this._container._ariaLabelledBy = _this.id; });
        }
    };
    return MdDialogTitle;
}());
export { MdDialogTitle };
MdDialogTitle.decorators = [
    { type: Directive, args: [{
                selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',
                host: {
                    'class': 'mat-dialog-title',
                    '[id]': 'id',
                },
            },] },
];
/**
 * @nocollapse
 */
MdDialogTitle.ctorParameters = function () { return [
    { type: MdDialogContainer, decorators: [{ type: Optional },] },
]; };
MdDialogTitle.propDecorators = {
    'id': [{ type: Input },],
};
function MdDialogTitle_tsickle_Closure_declarations() {
    /** @type {?} */
    MdDialogTitle.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdDialogTitle.ctorParameters;
    /** @type {?} */
    MdDialogTitle.propDecorators;
    /** @type {?} */
    MdDialogTitle.prototype.id;
    /** @type {?} */
    MdDialogTitle.prototype._container;
}
/**
 * Scrollable content container of a dialog.
 */
var MdDialogContent = (function () {
    function MdDialogContent() {
    }
    return MdDialogContent;
}());
export { MdDialogContent };
MdDialogContent.decorators = [
    { type: Directive, args: [{
                selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,' +
                    '[mdDialogContent], [matDialogContent]',
                host: { 'class': 'mat-dialog-content' }
            },] },
];
/**
 * @nocollapse
 */
MdDialogContent.ctorParameters = function () { return []; };
function MdDialogContent_tsickle_Closure_declarations() {
    /** @type {?} */
    MdDialogContent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdDialogContent.ctorParameters;
}
/**
 * Container for the bottom action buttons in a dialog.
 * Stays fixed to the bottom when scrolling.
 */
var MdDialogActions = (function () {
    function MdDialogActions() {
    }
    return MdDialogActions;
}());
export { MdDialogActions };
MdDialogActions.decorators = [
    { type: Directive, args: [{
                selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,' +
                    '[mdDialogActions], [matDialogActions]',
                host: { 'class': 'mat-dialog-actions' }
            },] },
];
/**
 * @nocollapse
 */
MdDialogActions.ctorParameters = function () { return []; };
function MdDialogActions_tsickle_Closure_declarations() {
    /** @type {?} */
    MdDialogActions.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdDialogActions.ctorParameters;
}
//# sourceMappingURL=dialog-content-directives.js.map