{"version":3,"sources":["../../../../src/lib/button-toggle/button-toggle.ts"],"names":[],"mappings":"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","file":"button-toggle.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {UniqueSelectionDispatcher, coerceBooleanProperty, FocusOriginMonitor} from '../core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * \\@docs-private\n */\nexport class MdButtonToggleGroupBase {}\nexport const /** @type {?} */ _MdButtonToggleGroupMixinBase = mixinDisabled(MdButtonToggleGroupBase);\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle | null;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup extends _MdButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle | null = null;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle>;\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n/** @type {?} */\nMdButtonToggleGroup.prototype._changeDetector;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple extends _MdButtonToggleGroupMixinBase\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit, OnDestroy {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = false;\n/**\n * Unregister function for _buttonToggleDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _changeDetectorRef\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let /** @type {?} */ groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    'class': 'mat-button-toggle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: HostBinding },{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: HostBinding, args: ['class.mat-button-toggle-checked', ] },{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: HostBinding, args: ['class.mat-button-toggle-disabled', ] },{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabelledby;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/**\n * Unregister function for _buttonToggleDispatcher *\n * @type {?}\n */\nMdButtonToggle.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._changeDetectorRef;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}