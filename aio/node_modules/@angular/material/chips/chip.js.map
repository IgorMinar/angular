{"version":3,"sources":["../../../../src/lib/chips/chip.ts"],"names":[],"mappings":"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","file":"chip.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  forwardRef,\n} from '@angular/core';\n\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {SPACE, BACKSPACE, DELETE} from '../core/keyboard/keycodes';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MdBasicChip { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements Focusable, OnDestroy, CanColor, CanDisable {\n\n   _chipRemove: MdChipRemove;\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    (this.selected ? this.select : this.deselect).emit({chip: this});\n  }\n  protected _selected: boolean = false;\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\n * changes to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean {\n    return this._selectable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean {\n    return this._removable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Emitted when the chip is focused.\n */\nonFocus = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is selected.\n */\nselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is deselected.\n */\ndeselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * @return {?}\n */\nget ariaSelected(): string {\n    return this.selectable ? this.selected.toString() : '';\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n/**\n * Emitted when a chip is to be removed.\n */\nonRemove = new EventEmitter<MdChipEvent>();\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?}\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this.onFocus.emit({chip: this});\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or\n * BACKSPACE keys are pressed.\n * \n * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n * @return {?}\n */\nremove(): void {\n    if (this.removable) {\n      this.onRemove.emit({chip: this});\n    }\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected();\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'mdChip',\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_hasFocus = false',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_chipRemove': [{ type: ContentChild, args: [forwardRef(() => MdChipRemove), ] },],\n'selected': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._chipRemove;\n/** @type {?} */\nMdChip.prototype._selected;\n/** @type {?} */\nMdChip.prototype._selectable;\n/** @type {?} */\nMdChip.prototype._removable;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emitted when the chip is focused.\n * @type {?}\n */\nMdChip.prototype.onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMdChip.prototype.onRemove;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n * \n * Example:\n * \n *     <md-chip>\n *       <md-icon mdChipRemove>cancel</md-icon>\n *     </md-chip>\n * \n * You *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles\n * to properly center the icon within the chip.\n */\nexport class MdChipRemove {\n/**\n * @param {?} _parentChip\n */\nconstructor(protected _parentChip: MdChip) {}\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @return {?}\n */\n_handleClick() {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdChipRemove], [matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdChip, },\n];\n}\n\nfunction MdChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipRemove.ctorParameters;\n/** @type {?} */\nMdChipRemove.prototype._parentChip;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}