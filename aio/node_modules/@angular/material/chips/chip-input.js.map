{"version":3,"sources":["../../../../src/lib/chips/chip-input.ts"],"names":[],"mappings":"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","file":"chip-input.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Output, EventEmitter, ElementRef, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '../core/keyboard/keycodes';\nimport {MdChipList} from './chip-list';\n\nexport interface MdChipInputEvent {\n  input: HTMLInputElement;\n  value: string;\n}\nexport class MdChipInput {\n\n  _chipList: MdChipList;\n/**\n * Register input for chip list\n * @param {?} value\n * @return {?}\n */\nset chipList(value: MdChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this._inputElement);\n    }\n  }\n/**\n * Whether or not the chipEnd event will be emitted when the input is blurred.\n * @return {?}\n */\nget addOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n   separatorKeyCodes: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipEnd = new EventEmitter<MdChipInputEvent>();\n/**\n * @param {?} value\n * @return {?}\n */\nset matChipList(value: MdChipList) { this.chipList = value; }\n/**\n * @return {?}\n */\nget matAddOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset matAddOnBlur(value) { this.addOnBlur = value; }\n/**\n * @return {?}\n */\nget matSeparatorKeyCodes() { return this.separatorKeyCodes; }\n/**\n * @param {?} v\n * @return {?}\n */\nset matSeparatorKeyCodes(v: number[]) { this.separatorKeyCodes = v; }\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _elementRef\n */\nconstructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n/**\n * Checks to see if the blur should emit the (chipEnd) event.\n * @return {?}\n */\n_blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n  }\n/**\n * Checks to see if the (chipEnd) event needs to be emitted.\n * @param {?=} event\n * @return {?}\n */\n_emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdChipInputFor], input[matChipInputFor]',\n  host: {\n    'class': 'mat-chip-input',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'chipList': [{ type: Input, args: ['mdChipInputFor', ] },],\n'addOnBlur': [{ type: Input, args: ['mdChipInputAddOnBlur', ] },],\n'separatorKeyCodes': [{ type: Input, args: ['mdChipInputSeparatorKeyCodes', ] },],\n'chipEnd': [{ type: Output, args: ['mdChipInputTokenEnd', ] },],\n'matChipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'matAddOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'matSeparatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n};\n}\n\nfunction MdChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipInput.ctorParameters;\n/** @type {?} */\nMdChipInput.propDecorators;\n/** @type {?} */\nMdChipInput.prototype._chipList;\n/** @type {?} */\nMdChipInput.prototype._addOnBlur;\n/** @type {?} */\nMdChipInput.prototype.separatorKeyCodes;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMdChipInput.prototype.chipEnd;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMdChipInput.prototype._inputElement;\n/** @type {?} */\nMdChipInput.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}