/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { Directive, ContentChild, ElementRef, EventEmitter, Input, Output, Renderer2, forwardRef, } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { mixinColor } from '../core/common-behaviors/color';
import { mixinDisabled } from '../core/common-behaviors/disabled';
import { SPACE, BACKSPACE, DELETE } from '../core/keyboard/keycodes';
/**
 * \@docs-private
 */
var MdChipBase = (function () {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     */
    function MdChipBase(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
    }
    return MdChipBase;
}());
export { MdChipBase };
function MdChipBase_tsickle_Closure_declarations() {
    /** @type {?} */
    MdChipBase.prototype._renderer;
    /** @type {?} */
    MdChipBase.prototype._elementRef;
}
export var /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');
/**
 * Dummy directive to add CSS class to basic chips.
 * \@docs-private
 */
var MdBasicChip = (function () {
    function MdBasicChip() {
    }
    return MdBasicChip;
}());
export { MdBasicChip };
MdBasicChip.decorators = [
    { type: Directive, args: [{
                selector: "md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]",
                host: { 'class': 'mat-basic-chip' }
            },] },
];
/**
 * @nocollapse
 */
MdBasicChip.ctorParameters = function () { return []; };
function MdBasicChip_tsickle_Closure_declarations() {
    /** @type {?} */
    MdBasicChip.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdBasicChip.ctorParameters;
}
/**
 * Material design styled Chip component. Used inside the MdChipList component.
 */
var MdChip = (function (_super) {
    tslib_1.__extends(MdChip, _super);
    /**
     * @param {?} renderer
     * @param {?} elementRef
     */
    function MdChip(renderer, elementRef) {
        var _this = _super.call(this, renderer, elementRef) || this;
        _this._selected = false;
        _this._selectable = true;
        _this._removable = true;
        /**
         * Whether the chip has focus.
         */
        _this._hasFocus = false;
        /**
         * Emitted when the chip is focused.
         */
        _this.onFocus = new EventEmitter();
        /**
         * Emitted when the chip is selected.
         */
        _this.select = new EventEmitter();
        /**
         * Emitted when the chip is deselected.
         */
        _this.deselect = new EventEmitter();
        /**
         * Emitted when the chip is destroyed.
         */
        _this.destroy = new EventEmitter();
        /**
         * Emitted when a chip is to be removed.
         */
        _this.onRemove = new EventEmitter();
        return _this;
    }
    Object.defineProperty(MdChip.prototype, "selected", {
        /**
         * Whether the chip is selected.
         * @return {?}
         */
        get: function () { return this._selected; },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._selected = coerceBooleanProperty(value);
            (this.selected ? this.select : this.deselect).emit({ chip: this });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdChip.prototype, "selectable", {
        /**
         * Whether or not the chips are selectable. When a chip is not selectable,
         * changes to it's selected state are always ignored.
         * @return {?}
         */
        get: function () {
            return this._selectable;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._selectable = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdChip.prototype, "removable", {
        /**
         * Determines whether or not the chip displays the remove styling and emits (remove) events.
         * @return {?}
         */
        get: function () {
            return this._removable;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._removable = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdChip.prototype, "ariaSelected", {
        /**
         * @return {?}
         */
        get: function () {
            return this.selectable ? this.selected.toString() : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdChip.prototype.ngOnDestroy = function () {
        this.destroy.emit({ chip: this });
    };
    /**
     * Toggles the current selected state of this chip.
     * @return {?}
     */
    MdChip.prototype.toggleSelected = function () {
        this.selected = !this.selected;
        return this.selected;
    };
    /**
     * Allows for programmatic focusing of the chip.
     * @return {?}
     */
    MdChip.prototype.focus = function () {
        this._elementRef.nativeElement.focus();
        this.onFocus.emit({ chip: this });
    };
    /**
     * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or
     * BACKSPACE keys are pressed.
     *
     * Informs any listeners of the removal request. Does not remove the chip from the DOM.
     * @return {?}
     */
    MdChip.prototype.remove = function () {
        if (this.removable) {
            this.onRemove.emit({ chip: this });
        }
    };
    /**
     * Ensures events fire properly upon click.
     * @param {?} event
     * @return {?}
     */
    MdChip.prototype._handleClick = function (event) {
        // Check disabled
        if (this.disabled) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this.focus();
    };
    /**
     * Handle custom key presses.
     * @param {?} event
     * @return {?}
     */
    MdChip.prototype._handleKeydown = function (event) {
        if (this.disabled) {
            return;
        }
        switch (event.keyCode) {
            case DELETE:
            case BACKSPACE:
                // If we are removable, remove the focused chip
                this.remove();
                // Always prevent so page navigation does not occur
                event.preventDefault();
                break;
            case SPACE:
                // If we are selectable, toggle the focused chip
                if (this.selectable) {
                    this.toggleSelected();
                }
                // Always prevent space from scrolling the page since the list has focus
                event.preventDefault();
                break;
        }
    };
    return MdChip;
}(_MdChipMixinBase));
export { MdChip };
MdChip.decorators = [
    { type: Directive, args: [{
                selector: "md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]",
                inputs: ['color', 'disabled'],
                exportAs: 'mdChip',
                host: {
                    'class': 'mat-chip',
                    'tabindex': '-1',
                    'role': 'option',
                    '[class.mat-chip-selected]': 'selected',
                    '[attr.disabled]': 'disabled || null',
                    '[attr.aria-disabled]': 'disabled.toString()',
                    '[attr.aria-selected]': 'ariaSelected',
                    '(click)': '_handleClick($event)',
                    '(keydown)': '_handleKeydown($event)',
                    '(focus)': '_hasFocus = true',
                    '(blur)': '_hasFocus = false',
                }
            },] },
];
/**
 * @nocollapse
 */
MdChip.ctorParameters = function () { return [
    { type: Renderer2, },
    { type: ElementRef, },
]; };
MdChip.propDecorators = {
    '_chipRemove': [{ type: ContentChild, args: [forwardRef(function () { return MdChipRemove; }),] },],
    'selected': [{ type: Input },],
    'selectable': [{ type: Input },],
    'removable': [{ type: Input },],
    'select': [{ type: Output },],
    'deselect': [{ type: Output },],
    'destroy': [{ type: Output },],
    'onRemove': [{ type: Output, args: ['remove',] },],
};
function MdChip_tsickle_Closure_declarations() {
    /** @type {?} */
    MdChip.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdChip.ctorParameters;
    /** @type {?} */
    MdChip.propDecorators;
    /** @type {?} */
    MdChip.prototype._chipRemove;
    /** @type {?} */
    MdChip.prototype._selected;
    /** @type {?} */
    MdChip.prototype._selectable;
    /** @type {?} */
    MdChip.prototype._removable;
    /**
     * Whether the chip has focus.
     * @type {?}
     */
    MdChip.prototype._hasFocus;
    /**
     * Emitted when the chip is focused.
     * @type {?}
     */
    MdChip.prototype.onFocus;
    /**
     * Emitted when the chip is selected.
     * @type {?}
     */
    MdChip.prototype.select;
    /**
     * Emitted when the chip is deselected.
     * @type {?}
     */
    MdChip.prototype.deselect;
    /**
     * Emitted when the chip is destroyed.
     * @type {?}
     */
    MdChip.prototype.destroy;
    /**
     * Emitted when a chip is to be removed.
     * @type {?}
     */
    MdChip.prototype.onRemove;
}
/**
 * Applies proper (click) support and adds styling for use with the Material Design "cancel" icon
 * available at https://material.io/icons/#ic_cancel.
 *
 * Example:
 *
 *     <md-chip>
 *       <md-icon mdChipRemove>cancel</md-icon>
 *     </md-chip>
 *
 * You *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles
 * to properly center the icon within the chip.
 */
var MdChipRemove = (function () {
    /**
     * @param {?} _parentChip
     */
    function MdChipRemove(_parentChip) {
        this._parentChip = _parentChip;
    }
    /**
     * Calls the parent chip's public `remove()` method if applicable.
     * @return {?}
     */
    MdChipRemove.prototype._handleClick = function () {
        if (this._parentChip.removable) {
            this._parentChip.remove();
        }
    };
    return MdChipRemove;
}());
export { MdChipRemove };
MdChipRemove.decorators = [
    { type: Directive, args: [{
                selector: '[mdChipRemove], [matChipRemove]',
                host: {
                    'class': 'mat-chip-remove',
                    '(click)': '_handleClick($event)'
                }
            },] },
];
/**
 * @nocollapse
 */
MdChipRemove.ctorParameters = function () { return [
    { type: MdChip, },
]; };
function MdChipRemove_tsickle_Closure_declarations() {
    /** @type {?} */
    MdChipRemove.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdChipRemove.ctorParameters;
    /** @type {?} */
    MdChipRemove.prototype._parentChip;
}
//# sourceMappingURL=chip.js.map