{"version":3,"sources":["../../../../src/lib/table/cell.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAGH,OADO,EAAA,SAAE,EAAU,UAAA,EAAY,KAAA,EAAO,SAAA,EAAU,MAAA,eAAA,CAAA;AAEhD,OADO,EAEL,OAAO,EACP,UAAU,EACV,YAAY,EACZ,aAAa,EACb,gBAAK,GACN,MAAM,oBAAoB,CAAC;AAC5B;;GAEG;AACH,MAFC,CAAA,IAAA,UAAA,GAAA,UAAA,CAAA;AAGD,MAAM,CAFC,IAAA,gBAAA,CAAM,gBAAA,GAAmB,gBAAA,CAAiB;AAGjD,MAAM,CAFC,IAAA,gBAAA,CAAM,YAAA,GAAe,YAAA,CAAa;AAGzC,MAAM,CAFC,IAAA,gBAAA,CAAM,aAAA,GAAgB,aAAA,CAAc;AAG3C,MAAM,CAFC,IAAA,gBAAA,CAAM,OAAA,GAAU,OAAA,CAAQ;AAG/B;;;GAGG;AACH;IAAC,qCAAA;IAAD;;IAWA,CAAC;IAAD,gBAAC;AAAD,CAXA,AAWC,CAXA,UAAA;;AAAkD,oBAAA,GAAoC;IACvF,EAAE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBACvB,QAAQ,EAAE,2BAAA;gBACV,SAAS,EAAE,CAAA,EAAE,OAAC,EAAQ,UAAA,EAAY,WAAA,EAAa,SAAA,EAAU,CAAC;aAC3D,EAAC,EAAG;CACJ,CAAC;AACF;;GAEG;AADF,wBAAA,GAAA,cAAA,OAAA,EAGA,EAHA,CAGA,CAAC;AAGF;IACA,gBAAgB;IAChB,SAAS,CAAC,UAAU,CAAC;IACrB;;;OAGG;IACH,SAAS,CAAC,cAAc,CAAC;AACzB,CAAC;AAED;;;GAGG;AACH;IAXC,2CAAA;IAWD;;IAWA,CAAC;IAAD,sBAAC;AAAD,CAXA,AAWC,CAtBA,gBAAA;;AAA8D,0BAAA,GAAoC;IAYnG,EAXE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAYvB,QAAQ,EAXE,uCAAA;gBAYV,SAAS,EAXE,CAAA,EAAE,OAAC,EAAQ,gBAAA,EAAkB,WAAA,EAAa,eAAA,EAAgB,CAAC;aAYvE,EAXC,EAAG;CAYJ,CAXC;AAYF;;GAEG;AAZF,8BAAA,GAAA,cAAA,OAAA,EAcA,EAdA,CAcA,CAAC;AAGF;IACA,gBAAgB;IAChB,eAAe,CAAC,UAAU,CAAC;IAC3B;;;OAGG;IACH,eAAe,CAAC,cAAc,CAAC;AAC/B,CAAC;AAED;;;GAGG;AACH;IAtBC,uCAAA;IAsBD;;IAmBA,CAAC;IAAD,kBAAC;AAAD,CAnBA,AAmBC,CAzCA,YAAA;;AAGM,sBAAA,GAAoC;IAyB3C,EAxBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAyBvB,QAAQ,EAxBE,+BAAA;gBAyBV,SAAS,EAxBE,CAAA,EAAE,OAAC,EAAQ,YAAA,EAAc,WAAA,EAAa,WAAA,EAAY,CAAC;aAyB/D,EAxBC,EAAG;CAyBJ,CAxBC;AAyBF;;GAEG;AAzBF,0BAAA,GAAA,cAAA,OAAA,EA2BA,EA3BA,CA2BA,CAAC;AAzBK,0BAAA,GAAyD;IA2BhE,MAAM,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,aAAE,EAAa,EAAG,EAAE;CA2BjD,CA1BC;AA6BF;IACA,gBAAgB;IAChB,WAAW,CAAC,UAAU,CAAC;IACvB;;;OAGG;IACH,WAAW,CAAC,cAAc,CAAC;IAC3B,gBAAgB;IAChB,WAAW,CAAC,cAAc,CAAC;IAC3B;;;OAGG;IACH,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC;AAC3B,CAAC;AAED;;GAEG;AACH;IA5CC,wCAAA;IA6CD;;;;OAIG;IACH,sBAjDG,SAAsB,EAkDX,UAjDY,EAkDZ,QAjDU;QA+CxB,YAGI,kBAAM,SAAS,EAAE,UAAU,EAAE,QAAQ,CAAC,SAEvC;QADC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE,gBAAc,SAAS,CAAC,oBAAsB,CAAC,CAAC;;IAC9F,CAAC;IAkBH,mBAAC;AAAD,CA7BA,AA6BC,CAzEA,aAAA;;AAOM,uBAAA,GAAoC;IAkD3C,EAjDE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAkDvB,QAAQ,EAjDE,iCAAA;gBAkDV,IAAI,EAjDE;oBAkDJ,OAAO,EAjDE,iBAAA;oBAkDT,MAAM,EAjDE,cAAA;iBAkDT;aACF,EAjDC,EAAG;CAkDJ,CAjDC;AAkDF;;GAEG;AAlDF,2BAAA,GAAA,cAAA,OAAA;IAoDD,EAAC,IAAI,EAAE,YAAY,GAAG;IACtB,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,SAAS,GAAG;CAClB,EAvDA,CAuDA,CAAC;AAGF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;AAC5B,CAAC;AAED;;GAEG;AACH;IA9DC,kCAAA;IA+DD;;;;OAIG;IACH,gBAnEG,SAAsB,EAoEX,UAnEY,EAoEZ,QAnEU;QAiExB,YAGI,kBAAM,SAAS,EAAE,UAAU,EAAE,QAAQ,CAAC,SAEvC;QADC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE,gBAAc,SAAS,CAAC,oBAAsB,CAAC,CAAC;;IAC9F,CAAC;IAkBH,aAAC;AAAD,CA7BA,AA6BC,CA3FA,OAAA;;AAOM,iBAAA,GAAoC;IAoE3C,EAnEE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAoEvB,QAAQ,EAnEE,mBAAA;gBAoEV,IAAI,EAnEE;oBAoEJ,OAAO,EAnEE,UAAA;oBAoET,MAAM,EAnEE,UAAA;iBAoET;aACF,EAnEC,EAAG;CAoEJ,CAnEC;AAoEF;;GAEG;AApEF,qBAAA,GAAA,cAAA,OAAA;IAsED,EAAC,IAAI,EAAE,YAAY,GAAG;IACtB,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,SAAS,GAAG;CAClB,EAzEA,CAyEA,CAAC;AAGF;IACA,gBAAgB;IAChB,MAAM,CAAC,UAAU,CAAC;IAClB;;;OAGG;IACH,MAAM,CAAC,cAAc,CAAC;AACtB,CAAC","file":"cell.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, Renderer2} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdCellDef = CdkCellDef;\nexport const /** @type {?} */ _MdHeaderCellDef = CdkHeaderCellDef;\nexport const /** @type {?} */ _MdColumnDef = CdkColumnDef;\nexport const /** @type {?} */ _MdHeaderCell = CdkHeaderCell;\nexport const /** @type {?} */ _MdCell = CdkCell;\n/**\n * Cell definition for the md-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class MdCellDef extends _MdCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdCellDef], [matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MdCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCellDef.ctorParameters;\n}\n\n/**\n * Header cell definition for the md-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class MdHeaderCellDef extends _MdHeaderCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdHeaderCellDef], [matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MdHeaderCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCellDef.ctorParameters;\n}\n\n/**\n * Column definition for the md-table.\n * Defines a set of cells available for a table column.\n */\nexport class MdColumnDef extends _MdColumnDef {\n/**\n * Unique name for this column.\n */\nname: string;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdColumnDef], [matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MdColumnDef}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['mdColumnDef', ] },],\n};\n}\n\nfunction MdColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdColumnDef.ctorParameters;\n/** @type {?} */\nMdColumnDef.propDecorators;\n/**\n * Unique name for this column.\n * @type {?}\n */\nMdColumnDef.prototype.name;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class MdHeaderCell extends _MdHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-header-cell, mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class MdCell extends _MdCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-cell, mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}