/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { CdkCell, CdkCellDef, CdkColumnDef, CdkHeaderCell, CdkHeaderCellDef, } from '@angular/cdk/table';
/**
 * Workaround for https://github.com/angular/angular/issues/17849
 */
export var _MdCellDef = CdkCellDef;
export var /** @type {?} */ _MdHeaderCellDef = CdkHeaderCellDef;
export var /** @type {?} */ _MdColumnDef = CdkColumnDef;
export var /** @type {?} */ _MdHeaderCell = CdkHeaderCell;
export var /** @type {?} */ _MdCell = CdkCell;
/**
 * Cell definition for the md-table.
 * Captures the template of a column's data row cell as well as cell-specific properties.
 */
var MdCellDef = (function (_super) {
    tslib_1.__extends(MdCellDef, _super);
    function MdCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MdCellDef;
}(_MdCellDef));
export { MdCellDef };
MdCellDef.decorators = [
    { type: Directive, args: [{
                selector: '[mdCellDef], [matCellDef]',
                providers: [{ provide: CdkCellDef, useExisting: MdCellDef }]
            },] },
];
/**
 * @nocollapse
 */
MdCellDef.ctorParameters = function () { return []; };
function MdCellDef_tsickle_Closure_declarations() {
    /** @type {?} */
    MdCellDef.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdCellDef.ctorParameters;
}
/**
 * Header cell definition for the md-table.
 * Captures the template of a column's header cell and as well as cell-specific properties.
 */
var MdHeaderCellDef = (function (_super) {
    tslib_1.__extends(MdHeaderCellDef, _super);
    function MdHeaderCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MdHeaderCellDef;
}(_MdHeaderCellDef));
export { MdHeaderCellDef };
MdHeaderCellDef.decorators = [
    { type: Directive, args: [{
                selector: '[mdHeaderCellDef], [matHeaderCellDef]',
                providers: [{ provide: CdkHeaderCellDef, useExisting: MdHeaderCellDef }]
            },] },
];
/**
 * @nocollapse
 */
MdHeaderCellDef.ctorParameters = function () { return []; };
function MdHeaderCellDef_tsickle_Closure_declarations() {
    /** @type {?} */
    MdHeaderCellDef.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdHeaderCellDef.ctorParameters;
}
/**
 * Column definition for the md-table.
 * Defines a set of cells available for a table column.
 */
var MdColumnDef = (function (_super) {
    tslib_1.__extends(MdColumnDef, _super);
    function MdColumnDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MdColumnDef;
}(_MdColumnDef));
export { MdColumnDef };
MdColumnDef.decorators = [
    { type: Directive, args: [{
                selector: '[mdColumnDef], [matColumnDef]',
                providers: [{ provide: CdkColumnDef, useExisting: MdColumnDef }],
            },] },
];
/**
 * @nocollapse
 */
MdColumnDef.ctorParameters = function () { return []; };
MdColumnDef.propDecorators = {
    'name': [{ type: Input, args: ['mdColumnDef',] },],
};
function MdColumnDef_tsickle_Closure_declarations() {
    /** @type {?} */
    MdColumnDef.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdColumnDef.ctorParameters;
    /** @type {?} */
    MdColumnDef.propDecorators;
    /**
     * Unique name for this column.
     * @type {?}
     */
    MdColumnDef.prototype.name;
}
/**
 * Header cell template container that adds the right classes and role.
 */
var MdHeaderCell = (function (_super) {
    tslib_1.__extends(MdHeaderCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    function MdHeaderCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef, renderer) || this;
        renderer.addClass(elementRef.nativeElement, "mat-column-" + columnDef.cssClassFriendlyName);
        return _this;
    }
    return MdHeaderCell;
}(_MdHeaderCell));
export { MdHeaderCell };
MdHeaderCell.decorators = [
    { type: Directive, args: [{
                selector: 'md-header-cell, mat-header-cell',
                host: {
                    'class': 'mat-header-cell',
                    'role': 'columnheader',
                },
            },] },
];
/**
 * @nocollapse
 */
MdHeaderCell.ctorParameters = function () { return [
    { type: CdkColumnDef, },
    { type: ElementRef, },
    { type: Renderer2, },
]; };
function MdHeaderCell_tsickle_Closure_declarations() {
    /** @type {?} */
    MdHeaderCell.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdHeaderCell.ctorParameters;
}
/**
 * Cell template container that adds the right classes and role.
 */
var MdCell = (function (_super) {
    tslib_1.__extends(MdCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    function MdCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef, renderer) || this;
        renderer.addClass(elementRef.nativeElement, "mat-column-" + columnDef.cssClassFriendlyName);
        return _this;
    }
    return MdCell;
}(_MdCell));
export { MdCell };
MdCell.decorators = [
    { type: Directive, args: [{
                selector: 'md-cell, mat-cell',
                host: {
                    'class': 'mat-cell',
                    'role': 'gridcell',
                },
            },] },
];
/**
 * @nocollapse
 */
MdCell.ctorParameters = function () { return [
    { type: CdkColumnDef, },
    { type: ElementRef, },
    { type: Renderer2, },
]; };
function MdCell_tsickle_Closure_declarations() {
    /** @type {?} */
    MdCell.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdCell.ctorParameters;
}
//# sourceMappingURL=cell.js.map