/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Directive } from '@angular/core';
import { CdkHeaderRow, CdkRow, CDK_ROW_TEMPLATE, CdkRowDef, CdkHeaderRowDef, } from '@angular/cdk/table';
/**
 * Workaround for https://github.com/angular/angular/issues/17849
 */
export var _MdHeaderRowDef = CdkHeaderRowDef;
export var /** @type {?} */ _MdCdkRowDef = CdkRowDef;
export var /** @type {?} */ _MdHeaderRow = CdkHeaderRow;
export var /** @type {?} */ _MdRow = CdkRow;
/**
 * Header row definition for the md-table.
 * Captures the header row's template and other header properties such as the columns to display.
 */
var MdHeaderRowDef = (function (_super) {
    tslib_1.__extends(MdHeaderRowDef, _super);
    function MdHeaderRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MdHeaderRowDef;
}(_MdHeaderRowDef));
export { MdHeaderRowDef };
MdHeaderRowDef.decorators = [
    { type: Directive, args: [{
                selector: '[mdHeaderRowDef], [matHeaderRowDef]',
                providers: [{ provide: CdkHeaderRowDef, useExisting: MdHeaderRowDef }],
                inputs: ['columns: mdHeaderRowDef'],
            },] },
];
/**
 * @nocollapse
 */
MdHeaderRowDef.ctorParameters = function () { return []; };
function MdHeaderRowDef_tsickle_Closure_declarations() {
    /** @type {?} */
    MdHeaderRowDef.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdHeaderRowDef.ctorParameters;
}
/**
 * Data row definition for the md-table.
 * Captures the header row's template and other row properties such as the columns to display.
 */
var MdRowDef = (function (_super) {
    tslib_1.__extends(MdRowDef, _super);
    function MdRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MdRowDef;
}(_MdCdkRowDef));
export { MdRowDef };
MdRowDef.decorators = [
    { type: Directive, args: [{
                selector: '[mdRowDef], [matRowDef]',
                providers: [{ provide: CdkRowDef, useExisting: MdRowDef }],
                inputs: ['columns: mdRowDefColumns'],
            },] },
];
/**
 * @nocollapse
 */
MdRowDef.ctorParameters = function () { return []; };
function MdRowDef_tsickle_Closure_declarations() {
    /** @type {?} */
    MdRowDef.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdRowDef.ctorParameters;
}
/**
 * Header template container that contains the cell outlet. Adds the right class and role.
 */
var MdHeaderRow = (function (_super) {
    tslib_1.__extends(MdHeaderRow, _super);
    function MdHeaderRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MdHeaderRow;
}(_MdHeaderRow));
export { MdHeaderRow };
MdHeaderRow.decorators = [
    { type: Component, args: [{
                selector: 'md-header-row, mat-header-row',
                template: CDK_ROW_TEMPLATE,
                host: {
                    'class': 'mat-header-row',
                    'role': 'row',
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
MdHeaderRow.ctorParameters = function () { return []; };
function MdHeaderRow_tsickle_Closure_declarations() {
    /** @type {?} */
    MdHeaderRow.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdHeaderRow.ctorParameters;
}
/**
 * Data row template container that contains the cell outlet. Adds the right class and role.
 */
var MdRow = (function (_super) {
    tslib_1.__extends(MdRow, _super);
    function MdRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MdRow;
}(_MdRow));
export { MdRow };
MdRow.decorators = [
    { type: Component, args: [{
                selector: 'md-row, mat-row',
                template: CDK_ROW_TEMPLATE,
                host: {
                    'class': 'mat-row',
                    'role': 'row',
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
MdRow.ctorParameters = function () { return []; };
function MdRow_tsickle_Closure_declarations() {
    /** @type {?} */
    MdRow.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    MdRow.ctorParameters;
}
//# sourceMappingURL=row.js.map