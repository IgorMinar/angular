{"version":3,"sources":["../../../../src/lib/radio/radio.ts"],"names":[],"mappings":"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","file":"radio.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n\n// Increasing integer for generating unique ids for radio components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton | null;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioGroupBase { }\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${nextUniqueId++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton | null = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the radio group is required.\n */\nprivate _required: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton>;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is disabled\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * Whether the radio group is required\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * Whether the radio group is required.\n * @type {?}\n */\nMdRadioGroup.prototype._required;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(mixinDisableRipple(MdRadioButtonBase), 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\nprivate _uniqueId: string = `md-radio-${++nextUniqueId}`;\n/**\n * The unique ID for the radio button.\n */\nid: string = this._uniqueId;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the radio button is required.\n * @return {?}\n */\nget required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Whether this radio is required.\n */\nprivate _required: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Unregister function for _radioDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusOriginMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\n              elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    super(renderer, elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    const /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/** @type {?} */\nMdRadioButton.prototype._uniqueId;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Whether this radio is required.\n * @type {?}\n */\nMdRadioButton.prototype._required;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * Unregister function for _radioDispatcher *\n * @type {?}\n */\nMdRadioButton.prototype._removeUniqueSelectionListener;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusOriginMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}