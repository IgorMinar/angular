{"version":3,"sources":["../../../../src/lib/datepicker/month-view.ts"],"names":[],"mappings":"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","file":"month-view.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate == date) {\n      return;\n    }\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate),\n        date));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D): number | null {\n    return this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D, d2: D): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}