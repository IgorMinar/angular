{"version":3,"sources":["../../../../src/lib/datepicker/datepicker-intl.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OADO,EAAA,UAAE,EAAW,YAAA,EAAa,MAAA,eAAA,CAAA;AAEjC;;GAEG;AACH;IAAA;QACA;;;WAGG;QACH,YAAG,GAAA,IAAA,YAAA,EAAA,CAAA;QACH;;WAEG;QACH,kBADG,GAAA,UAAA,CAAA;QAEH;;WAEG;QACH,sBAFG,GAAA,eAAA,CAAA;QAGH;;WAEG;QACH,mBAHG,GAAA,gBAAA,CAAA;QAIH;;WAEG;QACH,mBAJG,GAAA,YAAA,CAAA;QAKH;;WAEG;QACH,kBALG,GAAA,eAAA,CAAA;QAMH;;WAEG;QACH,kBANG,GAAA,WAAA,CAAA;QAOH;;WAEG;QACH,2BAPG,GAAA,sBAAA,CAAA;QAQH;;WAJE;QAOF,0BARG,GAAA,qBAAA,CAAA;IAiBH,CAAC;IAAD,uBAAC;AAAD,CA9CA,AA8CC;;AAhBM,2BAAA,GAAoC;IAS3C,EARE,IAAA,EAAM,UAAA,EAAW;CASlB,CARC;AASF;;GAEG;AATF,+BAAA,GAAA,cAAA,OAAA,EAWA,EAXA,CAWA,CAAC;AAGF;IACA,gBAAgB;IAChB,gBAAgB,CAAC,UAAU,CAAC;IAC5B;;;OAGG;IACH,gBAAgB,CAAC,cAAc,CAAC;IAChC;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC;IACnC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,aAAa,CAAC;IACzC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAC7C;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC1C;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC1C;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,aAAa,CAAC;IACzC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,aAAa,CAAC;IACzC;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,sBAAsB,CAAC;IAClD;;;OAGG;IACH,gBAAgB,CAAC,SAAS,CAAC,qBAAqB,CAAC;AACjD,CAAC","file":"datepicker-intl.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, EventEmitter} from '@angular/core';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: EventEmitter<void> = new EventEmitter<void>();\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdDatepickerIntl.prototype.changes;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}