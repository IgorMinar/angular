{"version":3,"sources":["../../../../src/lib/datepicker/year-view.ts"],"names":[],"mappings":"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","file":"year-view.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MdCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}