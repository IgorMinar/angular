{"version":3,"sources":["../../../../src/lib/paginator/paginator-intl.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OADO,EAAA,UAAE,EAAW,YAAA,EAAa,MAAA,eAAA,CAAA;AAEjC;;;GAGG;AACH;IAAA;QACA;;;WAGG;QACH,YACG,GAAA,IAAA,YAAA,EAAA,CAAA;QAAH;;WAEG;QACH,sBAAG,GAAA,iBAAA,CAAA;QACH;;WAEG;QACH,kBADG,GAAA,WAAA,CAAA;QAEH;;WAEG;QACH,sBAFG,GAAA,eAAA,CAAA;QAGH;;WAEG;QACH,kBAHG,GAAA,UAAA,IAAA,EAAA,QAAA,EAAA,MAAA;YAIC,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC,UAAQ,MAAQ,CAAC;YAAC,CAAC;YAE9D,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAE7B,IAAM,UAAU,GAAG,IAAI,GAAG,QAAQ,CAAC;YAEnC,2FAA2F;YAC3F,IAAM,QAAQ,GAAG,UAAU,GAAG,MAAM;gBAChC,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,QAAQ,EAAE,MAAM,CAAC;gBACvC,UAAU,GAAG,QAAQ,CAAC;YAE1B,MAAM,CAAI,UAAU,GAAG,CAAC,WAAM,QAAQ,YAAO,MAAQ,CAAC;QACxD,CAAC,CAAA;IASH,CAAC;IAAD,sBAAC;AAAD,CA3CA,AA2CC;;AAXM,0BAAA,GAAoC;IAI3C,EAHE,IAAA,EAAM,UAAA,EAAW;CAIlB,CAHC;AAIF;;GAEG;AAJF,8BAAA,GAAA,cAAA,OAAA,EAMA,EANA,CAMA,CAAC;AAGF;IACA,gBAAgB;IAChB,eAAe,CAAC,UAAU,CAAC;IAC3B;;;OAGG;IACH,eAAe,CAAC,cAAc,CAAC;IAC/B;;;;OAIG;IACH,eAAe,CAAC,SAAS,CAAC,OAAO,CAAC;IAClC;;;OAGG;IACH,eAAe,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAC5C;;;OAGG;IACH,eAAe,CAAC,SAAS,CAAC,aAAa,CAAC;IACxC;;;OAGG;IACH,eAAe,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAC5C;;;OAGG;IACH,eAAe,CAAC,SAAS,CAAC,aAAa,CAAC;AACxC,CAAC","file":"paginator-intl.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, EventEmitter} from '@angular/core';\n/**\n * To modify the labels and text displayed, create a new instance of MdPaginatorIntl and\n * include it in a custom provider\n */\nexport class MdPaginatorIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: EventEmitter<void> = new EventEmitter<void>();\n/**\n * A label for the page size selector.\n */\nitemsPerPageLabel = 'Items per page:';\n/**\n * A label for the button that increments the current page.\n */\nnextPageLabel = 'Next page';\n/**\n * A label for the button that decrements the current page.\n */\npreviousPageLabel = 'Previous page';\n/**\n * A label for the range of items within the current page and the length of the whole list.\n */\ngetRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdPaginatorIntl.prototype.changes;\n/**\n * A label for the page size selector.\n * @type {?}\n */\nMdPaginatorIntl.prototype.itemsPerPageLabel;\n/**\n * A label for the button that increments the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.nextPageLabel;\n/**\n * A label for the button that decrements the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.previousPageLabel;\n/**\n * A label for the range of items within the current page and the length of the whole list.\n * @type {?}\n */\nMdPaginatorIntl.prototype.getRangeLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}