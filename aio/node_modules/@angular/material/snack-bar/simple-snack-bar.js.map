{"version":3,"sources":["../../../../src/lib/snack-bar/simple-snack-bar.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OADO,EAAA,SAAE,EAAU,iBAAA,EAAmB,MAAA,EAAQ,uBAAA,EAAwB,MAAA,eAAA,CAAA;AAEtE,OADO,EAAA,aAAE,EAAa,MAAA,iBAAA,CAAA;AAEtB,OADO,EAAA,iBAAE,EAAiB,MAAA,oBAAA,CAAA;AAE1B;;;GAGG;AACH;IAKA;;;OAGG;IACH,wBAFW,WAA0C,EAIhD,IAHM;QADA,gBAAA,GAAA,WAAA,CAA0C;QAKjD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IACH;;;OAGG;IACH,+BALG,GAKH;QACI,IAAI,CALC,WAAC,CAAW,eAAC,EAAe,CAAE;IAMrC,CAAC;IAKH,sBAPG,qCAAA;QAGH;;;WAGG;aACH;YACI,MAAM,CAPC,CAAA,CAAE,IAAC,CAAI,IAAC,CAAI,MAAC,CAAM;QAQ5B,CAAC;;;OAAA;IAqBH,qBAAC;AAAD,CAhDA,AAgDC;;AA3BM,yBAAA,GAAoC;IAQ3C,EAPE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAQvB,QAAQ,EAPE,MAAA,CAAO,EAAC;gBAQlB,QAAQ,EAPE,kBAAA;gBAQV,WAAW,EAPE,uBAAA;gBAQb,SAAS,EAPE,CAAA,sBAAE,CAAsB;gBAQnC,aAAa,EAPE,iBAAA,CAAkB,IAAC;gBAQlC,eAAe,EAPE,uBAAA,CAAwB,MAAC;gBAQ1C,IAAI,EAPE;oBAQJ,OAAO,EAPE,qBAAA;iBAQV;aACF,EAPC,EAAG;CAQJ,CAPC;AAQF;;GAEG;AARF,6BAAA,GAAA,cAAA,OAAA;IAUD,EAAC,IAAI,EAAE,aAAa,GAAG;IACvB,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAG,EAAE,EAAG,EAAC;CAC/E,EAZA,CAYA,CAAC;AAGF;IACA,gBAAgB;IAChB,cAAc,CAAC,UAAU,CAAC;IAC1B;;;OAGG;IACH,cAAc,CAAC,cAAc,CAAC;IAC9B;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC;AACrC,CAAC","file":"simple-snack-bar.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MD_SNACK_BAR_DATA} from './snack-bar-config';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * Data that was injected into the snack bar.\n */\ndata: { message: string, action: string };\n/**\n * @param {?} snackBarRef\n * @param {?} data\n */\nconstructor(\npublic snackBarRef: MdSnackBarRef<SimpleSnackBar>,\n     data: any) {\n    this.data = data;\n  }\n/**\n * Performs the action on the snack bar.\n * @return {?}\n */\naction(): void {\n    this.snackBarRef.closeWithAction();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.data.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBarRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_SNACK_BAR_DATA, ] }, ]},\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * Data that was injected into the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.data;\n/** @type {?} */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}