{"version":3,"sources":["../../../../src/lib/snack-bar/snack-bar-container.ts"],"names":[],"mappings":"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","file":"snack-bar-container.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {first} from '../core/rxjs/index';\n\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\nprivate onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\nprivate onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nanimationState: SnackBarState = 'initial';\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): Map<string, any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this.onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    // Note: we shouldn't use `this` inside the zone callback,\n    // because it can cause a memory leak.\n    const /** @type {?} */ onExit = this.onExit;\n\n    first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => {\n      onExit.next();\n      onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'alert',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'translateY(100%)'})),\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}