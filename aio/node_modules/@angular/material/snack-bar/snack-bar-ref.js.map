{"version":3,"sources":["../../../../src/lib/snack-bar/snack-bar-ref.ts"],"names":[],"mappings":"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","file":"snack-bar-ref.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\n/**\n * The instance of the component making up the content of the snack bar.\n */\ninstance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction = new Subject<void>();\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n */\nprivate _durationTimeoutId: number;\n/**\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\ncloseWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Dismisses the snack bar after some duration\n * @param {?} duration\n * @return {?}\n */\n_dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nMdSnackBarRef.prototype.instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n * @type {?}\n */\nMdSnackBarRef.prototype._durationTimeoutId;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n"]}