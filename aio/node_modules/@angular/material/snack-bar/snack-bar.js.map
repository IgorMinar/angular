{"version":3,"sources":["../../../../src/lib/snack-bar/snack-bar.ts"],"names":[],"mappings":"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","file":"snack-bar.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Injectable,\n  ComponentRef,\n  Optional,\n  SkipSelf,\n  Injector,\n} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {PortalInjector} from '../core/portal/portal-injector';\nimport {extendObject} from '../core/util/object-extend';\nimport {MdSnackBarConfig, MD_SNACK_BAR_DATA} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any> | null = null;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> | null {\n    const /** @type {?} */ parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _injector\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _injector: Injector,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n    const /** @type {?} */ snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter( /** @type {?} */(( /** @type {?} */((_config)).duration))));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config?: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    const /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    const /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nprivate _attach<T>(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);\n    const /** @type {?} */ snackBarRef = new MdSnackBarRef<T>(container, overlayRef);\n    const /** @type {?} */ injector = this._createInjector(config, snackBarRef);\n    const /** @type {?} */ portal = new ComponentPortal(component, undefined, injector);\n    const /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    return snackBarRef;\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\n    const /** @type {?} */ state = new OverlayState();\n    state.direction = config.direction;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().bottom('0');\n    return this._overlay.create(state);\n  }\n/**\n * Creates an injector to be used inside of a snack bar component.\n * @template T\n * @param {?} config Config that was used to create the snack bar.\n * @param {?} snackBarRef Reference to the snack bar.\n * @return {?}\n */\nprivate _createInjector<T>(\n      config: MdSnackBarConfig,\n      snackBarRef: MdSnackBarRef<T>): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdSnackBarRef, snackBarRef);\n    injectionTokens.set(MD_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: Injector, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._injector;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}